<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE nta PUBLIC '-//Uppaal Team//DTD Flat System 1.6//EN' 'http://www.it.uu.se/research/group/darts/uppaal/flat-1_6.dtd'>
<nta>
	<declaration>// Global declaration
// System features
const int N_ROW = 10;
const int N_COL = 8;
const int N_DRONE = 3;
const int N_FIRST-RESPONDER = 3;
const int N_CIVILIAN = 3;

const int droneNv[N_DRONE] = [];
const int firstResponderTfr[N_FIRST-RESPONDER] = [];
const int civilianTv[N_CIVILIAN] = [];
const int civilianTzr[N_CIVILIAN] = [];

// Costants
int FREE = 0;
int FIRE = 1;
int FIRST-RESPONDER = 2;
int CIVILIAN = 3;
int EXIT = 4;
int ZERO-RESPONDER = 5;
int IN_ASSISTANCE = 6;
int VICTIM = 7;

// Directions
const int UP = 0;
const int RIGHT = 0;
const int DOWN = 0;
const int LEFT = 0;

// int DRONE = 2; NON c'è bisogno del drone perché nessuno deve leggere la posizione dei droni inoltre bisognerebbe aggiungere una ulteriore costante per indicare quando il drone si trova sopra a qualcun / qualcos altro che è un casotto. Così prendiamo due piccioni con una fava visto che non dobbiamo neanche aggiornare la posizione del drone sulla mappa.

// Variable Declaration
int map[N_ROW][N_COL];
int droneId[N_DRONE]; // Bisogna inizializzare con dei valori univoci prima dell'avvio del system declarations
int firstResponderId[N_FIRST-RESPONDER];
int civilianId[N_CIVILIAN];
const int MAX_ARRAY_SIZE = N_FIRST-RESPONDER + N_CIVILIAN;

// ---- POSITIONS ----

Position c_position[N_CIVILIAN]; // civilians positions
Position d_position[N_DRONE]; // drones positions
Position f_position[N_FIRST-RESPONDER]; // first responders positions

typedef struct {
    int r;
    int c;
} Position;

// Drones positions
Position d1;
Position d2;
Position d3;

// Civilians positions
Position c1;
Position c2;
Position c3;

// First responders positions
Position f1;
Position f2;
Position f3;

// Initialize the positions of drones and people
void initialize_positions() {
    
    // initialize drone positions
    d1.r = 0;
    d1.c = 0;
    d2.r = 1;
    d2.c = 1;
    d3.r = 2;
    d3.c = 2;
    d_position[0] = d1;
    d_position[1] = d2;
    d_position[2] = d3;

    // initialize civilian positions
    c1.r = 0;
    c1.c = 0;
    c2.r = 1;
    c2.c = 1;
    c3.r = 2;
    c3.c = 2;
    c_position[0] = d1;
    c_position[1] = d2;
    c_position[2] = d3;

    // initialize first responders positions
    f1.r = 0;
    f1.c = 0;
    f2.r = 1;
    f2.c = 1;
    f3.r = 2;
    f3.c = 2;
    f_position[0] = d1;
    f_position[1] = d2;
    f_position[2] = d3;

    // map initialization the top left cell is at position (0,0) and the bottom right is at (N_ROW - 1, N_COL - 1)
    map = {
        {0,0,0,0,0,0,0,2},
        {0,1,1,0,0,0,0,0},
        {0,1,1,7,0,0,0,0},
        {0,0,1,1,0,0,0,0},
        {0,3,0,0,0,0,0,0},
        {0,0,0,0,0,3,0,0},
        {0,0,0,0,0,0,0,0},
        {0,0,2,0,0,0,0,0},
        {0,0,0,0,0,0,0,0},
        {0,0,0,0,0,0,4,4},
    }

}

// Channel declaration
chan broadcast ready;
urgent chan communication; // Taken  asap by the civilian when not safe and not a victim
urgent chan assistance; // Taken  asap by the civilian when a victim // NO broadcast
urgent chan contact;
urgent chan safe;
urgent chan dead;
urgent chan broadcast youAreSafe;  // Broadcast for the case the first-responder saves the victim and a civilian instracted to contact by the dron
                            // If possible to send target messages =&gt; No need for broadcast

// FUNCTIONS DECLARATION

// checks if a entity can move in the provided direction
bool can_move_general(int direction, int&amp; positions[MAX_ARRAY_SIZE], int person_id) {


    Position current_position = positions[person_id];
    int new_r = current_position.r;
    int new_c = current_position.c;

    // Calculate new position based on direction
    if (direction == UP) new_r++;
    else if (direction == RIGHT) new_c++;
    else if (direction == DOWN) new_r--;
    else if (direction == LEFT) new_c--;

    // Check if new position is within grid bounds
    if (new_r &lt; 0 || new_r &gt;= GRID_SIZE || new_c &lt; 0 || new_c &gt;= GRID_SIZE) 
        return false;

    // Check if new position is empty in the grid
    if (grid[new_r][new_c] != 0) 
        return false;

    // Check if any other person is in the target position (redundant as the grid check is sufficient)
    //for (i : int[0, N_PERSONS-1]) {
    //    if (i != person_id &amp;&amp; 
    //        p_position[i].r == new_r &amp;&amp; 
    //        p_position[i].c == new_c) {
    //        return false;
    //    }
    //}

    return true;
}

// move in that direction
void move_general(int direction, int&amp; positions[MAX_ARRAY_SIZE], int person_id) {

    Position current_position = positions[person_id];
    int new_r = current_position.r;
    int new_c = current_position.c;

    // Calculate new position based on direction
    if (direction == UP) new_r++;
    else if (direction == RIGHT) new_c++;
    else if (direction == DOWN) new_r--;
    else if (direction == LEFT) new_c--;

    // Update position
    positions[person_id].r = new_r;
    positions[person_id].c = new_c;

    // Update grid
    grid[new_r][new_c] = 1;  // occupy new position
    grid[current_position.r][current_position.c] = 0;  // free old position

}

bool can_move_anywhere() {
            return can_move(UP) || can_move(RIGHT) || can_move(DOWN) || can_move(LEFT);
}

// HELPER FUNCTIONS FOR THE QUERIES

// checks that the positions of the people are different
bool are_different(){

  Position p;
  for (i : int[0,N_PERSONS-1]) {
    p = c_position[i];
    for (j : int[0,N_PERSONS-1]) {
        if(p.r == c_position[j].r &amp;&amp; p.c == c_position[j].c &amp;&amp; i != j &amp;&amp; p.r != 0 &amp;&amp; p.c != 0) {
            return false;
        }
    }
  }
  return true;

}</declaration>
	<template>
		<name>Initializer</name>
		<declaration>void setUp() {
    initialize_positions();
}</declaration>
		<location id="id0" x="-561" y="-68">
		</location>
		<location id="id1" x="-425" y="-68">
		</location>
		<init ref="id0"/>
		<transition id="id2">
			<source ref="id0"/>
			<target ref="id1"/>
			<label kind="synchronisation" x="-518" y="-93">ready!</label>
			<label kind="assignment" x="-527" y="-59">setUp()</label>
		</transition>
	</template>
	<template>
		<name x="5" y="5">Drone</name>
		<parameter>const int drone_id, const int Nv</parameter>
		<declaration>int direction = 1; // current movement direction of the drone (1 = UP, -1 = DOWN)

// Drone moving policy
void move() { 
    
    // get current drone position
    Position current_position = d_position[drone_id];
    
    // if the drone is at the top or the bottom of the grid change direction
    if (current_position.r == N_ROW - 1) {
        direction = -1;
        return;
    } else if (current_position.r == 0) {
        direction = 1;
        return;
    }

    // fly in the direction 
    d_position[drone_id].r = d_position[drone_id].r + direction; // update the drone's position  
   
}

bool areInRange() { // Check if both a civilian and a victim are in range

}

bool isFree() { // Check if the free civilian (not the victim) is not already the target of another drone
 // ??????????????????????????
}

void giveInstruction() { // Drone decision-making policy
 // Mark the civilian as a zero-responder OR NOT
 // The drone is the one deciding =&gt; It is the one who has to modify the value
}</declaration>
		<location id="id3" x="-2609" y="-476">
		</location>
		<location id="id4" x="-2482" y="-476">
			<committed/>
		</location>
		<location id="id5" x="-2609" y="-331">
			<name x="-2686" y="-340">Moving</name>
		</location>
		<location id="id6" x="-2142" y="-476">
			<committed/>
		</location>
		<location id="id7" x="-2312" y="-646">
			<committed/>
		</location>
		<init ref="id3"/>
		<transition id="id8">
			<source ref="id5"/>
			<target ref="id4"/>
			<label kind="assignment" x="-2507" y="-323">move()</label>
			<nail x="-2482" y="-331"/>
		</transition>
		<transition id="id9">
			<source ref="id6"/>
			<target ref="id4"/>
			<label kind="guard" x="-2346" y="-425">!isFree()</label>
			<nail x="-2312" y="-425"/>
		</transition>
		<transition id="id10">
			<source ref="id7"/>
			<target ref="id4"/>
			<label kind="synchronisation" x="-2524" y="-595">communication!</label>
			<label kind="assignment" x="-2550" y="-578">giveInstruction()</label>
		</transition>
		<transition id="id11">
			<source ref="id6"/>
			<target ref="id7"/>
			<label kind="guard" x="-2227" y="-586">isFree()</label>
		</transition>
		<transition id="id12">
			<source ref="id4"/>
			<target ref="id6"/>
			<label kind="guard" x="-2363" y="-501">areInRange()</label>
		</transition>
		<transition id="id13">
			<source ref="id4"/>
			<target ref="id5"/>
			<label kind="guard" x="-2669" y="-416">!areInRange()</label>
		</transition>
		<transition id="id14">
			<source ref="id3"/>
			<target ref="id4"/>
			<label kind="synchronisation" x="-2567" y="-502">ready?</label>
		</transition>
	</template>
	<template>
		<name>FirstResponder</name>
		<parameter>const int Id, const int Tfr</parameter>
		<declaration>// Clock declaration
clock x;

// Function declaration

bool can_move(int direction) {
    can_move_general(direction, f_position, Id);
}

void move(int direction){
    move_general(direction, f_position, Id);
}

bool isInRange() {

}

void assistanceFinished() {

}</declaration>
		<location id="id15" x="-1411" y="-433">
			<name x="-1445" y="-467">Wandering</name>
			<committed/>
		</location>
		<location id="id16" x="-569" y="-476">
			<name x="-612" y="-510">Assisting</name>
			<label kind="invariant" x="-579" y="-459">x &lt;= Tfr</label>
			<label kind="comments" x="-425" y="-739">More than a single first-responder can be assisting the same victim,
if they start helping them at the exact same time instant
(IRL they could not coordinate well,
since nobody was helping they did not see the others arriving).</label>
		</location>
		<location id="id17" x="-1215" y="-739">
		</location>
		<location id="id18" x="-909" y="-238">
			<name x="-951" y="-280">Contacting</name>
			<label kind="invariant" x="-1045" y="-212">x &lt;= Tfr + getDistance(1) + getDistance(2)</label>
			<label kind="comments" x="-1088" y="-178">contact? is urgent
=&gt; It is taken before the isInRange or not condition</label>
		</location>
		<location id="id19" x="-1054" y="-595">
			<committed/>
		</location>
		<location id="id20" x="-85" y="-238">
			<label kind="invariant" x="-229" y="-212">x &lt;= Tfr + getDistance(1) + getDistance(2)</label>
			<label kind="comments" x="-51" y="-391">If the victim dies before the first-responder can finish helping them
=&gt; Finish the assistance at least for the zero-responder</label>
		</location>
		<init ref="id17"/>
		<transition id="id21">
			<source ref="id15"/>
			<target ref="id19"/>
			<label kind="guard" x="-1368" y="-433">can_move(RIGHT)</label>
			<label kind="assignment" x="-1232" y="-450">move(RIGHT)</label>
			<nail x="-1249" y="-442"/>
		</transition>
		<transition id="id22">
			<source ref="id15"/>
			<target ref="id19"/>
			<label kind="guard" x="-1351" y="-374">can_move(LEFT)</label>
			<label kind="assignment" x="-1224" y="-374">move(LEFT)</label>
			<nail x="-1309" y="-382"/>
			<nail x="-1173" y="-382"/>
		</transition>
		<transition id="id23">
			<source ref="id15"/>
			<target ref="id19"/>
			<label kind="guard" x="-1360" y="-314">can_move(DOWN)</label>
			<label kind="assignment" x="-1232" y="-314">move(DOWN)</label>
			<nail x="-1351" y="-323"/>
			<nail x="-1130" y="-323"/>
		</transition>
		<transition id="id24">
			<source ref="id15"/>
			<target ref="id19"/>
			<label kind="guard" x="-1385" y="-272">can_move(UP)</label>
			<label kind="assignment" x="-1275" y="-272">move(UP)</label>
			<nail x="-1411" y="-280"/>
			<nail x="-1071" y="-280"/>
		</transition>
		<transition id="id25">
			<source ref="id19"/>
			<target ref="id18"/>
			<label kind="synchronisation" x="-1385" y="-629">contact?, assistance!</label>
			<label kind="assignment" x="-1317" y="-612">x = 0</label>
			<nail x="-1479" y="-595"/>
			<nail x="-1479" y="-238"/>
		</transition>
		<transition id="id26">
			<source ref="id20"/>
			<target ref="id19"/>
			<label kind="guard" x="-331" y="-442">x &gt;= Tfr + getDistance(1) + getDistance(2)</label>
			<label kind="synchronisation" x="-170" y="-459">youAreSafe!</label>
			<label kind="assignment" x="-221" y="-425">assistanceFinished(1)</label>
			<nail x="-85" y="-391"/>
			<nail x="-858" y="-391"/>
		</transition>
		<transition id="id27">
			<source ref="id18"/>
			<target ref="id20"/>
			<label kind="guard" x="-663" y="-280">x &lt; Tfr + getDistance(1) + getDistance(2)</label>
			<label kind="synchronisation" x="-518" y="-263">dead?</label>
		</transition>
		<transition id="id28">
			<source ref="id18"/>
			<target ref="id19"/>
			<label kind="guard" x="-1020" y="-331">x &gt;= Tfr + getDistance(1) + getDistance(2)</label>
			<label kind="synchronisation" x="-918" y="-348">youAreSafe!</label>
			<label kind="assignment" x="-935" y="-314">assistanceFinished(1,2)</label>
		</transition>
		<transition id="id29">
			<source ref="id16"/>
			<target ref="id19"/>
			<label kind="synchronisation" x="-501" y="-782">safe?</label>
			<nail x="-459" y="-476"/>
			<nail x="-459" y="-756"/>
			<nail x="-1054" y="-756"/>
		</transition>
		<transition id="id30">
			<source ref="id16"/>
			<target ref="id19"/>
			<label kind="guard" x="-637" y="-705">isMine()</label>
			<label kind="synchronisation" x="-612" y="-688">dead?</label>
			<nail x="-569" y="-663"/>
			<nail x="-1054" y="-663"/>
		</transition>
		<transition id="id31">
			<source ref="id16"/>
			<target ref="id19"/>
			<label kind="guard" x="-765" y="-620">x &gt;= Tfr</label>
			<label kind="synchronisation" x="-773" y="-603">youAreSafe!</label>
			<label kind="assignment" x="-782" y="-586">assistanceFinished()</label>
			<nail x="-858" y="-595"/>
		</transition>
		<transition id="id32">
			<source ref="id19"/>
			<target ref="id15"/>
			<label kind="guard" x="-1402" y="-544">!isInRange() &amp;&amp; 
can_move_anywhere()</label>
		</transition>
		<transition id="id33">
			<source ref="id19"/>
			<target ref="id16"/>
			<label kind="guard" x="-858" y="-518">isInRange()</label>
			<label kind="synchronisation" x="-850" y="-501">assitance!</label>
			<label kind="assignment" x="-841" y="-535">x = 0</label>
			<nail x="-756" y="-476"/>
		</transition>
		<transition id="id34">
			<source ref="id17"/>
			<target ref="id19"/>
			<label kind="synchronisation" x="-1173" y="-731">ready?</label>
		</transition>
	</template>
	<template>
		<name>Civilian</name>
		<parameter>const int civilian_id, const int Tv, const int Tzr</parameter>
		<declaration>// Clock declaration
clock x;

// Function declaration
bool can_move(int direction) {
    can_move_general(direction, c_position, Id);
}

void move(int direction){
    move_general(direction, c_position, Id);
}

bool amSafe() {

}

void safe() { // Mark the civilian as saved

}

bool amVictim() {

}

void victim() { // Mark the civilian as victim

}

void dead() { // Mark the civilian as dead

}

void inAssistance() { // Mark the civilian as in assistance

}

bool amZeroResponder() {

}

void assistanceFinished() {

}</declaration>
		<location id="id35" x="-2371" y="-119">
		</location>
		<location id="id36" x="-2184" y="-119">
			<committed/>
		</location>
		<location id="id37" x="-2184" y="-280">
			<name x="-2201" y="-314">Safe</name>
		</location>
		<location id="id38" x="-1776" y="-119">
			<committed/>
		</location>
		<location id="id39" x="-1776" y="-280">
			<name x="-1801" y="-314">Victim</name>
			<label kind="invariant" x="-1810" y="-263">x &lt;= Tv</label>
		</location>
		<location id="id40" x="-1428" y="-119">
			<label kind="comments" x="-1402" y="-127">Albi: abbiamo verificato che se communication? viene attivata e anche can_move_anywhere() è attiva si va comunque verso communication? ?</label>
			<committed/>
		</location>
		<location id="id41" x="-1776" y="-450">
			<name x="-1810" y="-484">Casualty</name>
		</location>
		<location id="id42" x="-2006" y="-280">
		</location>
		<location id="id43" x="-1428" y="-280">
			<committed/>
		</location>
		<location id="id44" x="-1428" y="-442">
			<name x="-1479" y="-476">ZeroResponder</name>
			<label kind="invariant" x="-1521" y="-425">x &lt;= Tzr + getDistance()</label>
		</location>
		<location id="id45" x="-1096" y="-280">
			<committed/>
		</location>
		<location id="id46" x="-1428" y="-646">
			<label kind="comments" x="-1861" y="-637">If the victim dies, the zero-responder finishes
helping themselves and they become safe</label>
		</location>
		<location id="id47" x="-1428" y="17">
			<name x="-1402" y="8">Wandering</name>
			<committed/>
		</location>
		<location id="id48" x="-1096" y="-544">
			<name x="-1071" y="-552">Contacting</name>
		</location>
		<location id="id49" x="-1096" y="-408">
			<committed/>
		</location>
		<init ref="id35"/>
		<transition id="id50">
			<source ref="id47"/>
			<target ref="id36"/>
			<label kind="guard" x="-1742" y="289">can_move(RIGHT)</label>
			<label kind="assignment" x="-1708" y="314">move(RIGHT)</label>
			<nail x="-1623" y="314"/>
			<nail x="-2184" y="314"/>
		</transition>
		<transition id="id51">
			<source ref="id47"/>
			<target ref="id36"/>
			<label kind="guard" x="-1674" y="187">can_move(LEFT)</label>
			<label kind="assignment" x="-1666" y="221">move(LEFT)</label>
			<nail x="-1555" y="212"/>
			<nail x="-2184" y="212"/>
		</transition>
		<transition id="id52">
			<source ref="id47"/>
			<target ref="id36"/>
			<label kind="guard" x="-1615" y="85">can_move(DOWN)</label>
			<label kind="assignment" x="-1606" y="127">move(DOWN)</label>
			<nail x="-1496" y="119"/>
			<nail x="-2184" y="119"/>
		</transition>
		<transition id="id53">
			<source ref="id47"/>
			<target ref="id36"/>
			<label kind="guard" x="-1555" y="-8">can_move(UP)</label>
			<label kind="assignment" x="-1521" y="25">move(UP)</label>
			<nail x="-2184" y="17"/>
		</transition>
		<transition id="id54">
			<source ref="id49"/>
			<target ref="id48"/>
			<label kind="synchronisation" x="-1071" y="-493">assistance?</label>
			<label kind="assignment" x="-1071" y="-476">inAssistance()</label>
		</transition>
		<transition id="id55">
			<source ref="id45"/>
			<target ref="id49"/>
			<label kind="synchronisation" x="-1071" y="-348">contact!</label>
		</transition>
		<transition id="id56">
			<source ref="id48"/>
			<target ref="id37"/>
			<label kind="synchronisation" x="-1088" y="-714">youAreSafe?</label>
			<label kind="assignment" x="-1088" y="-697">safe()</label>
			<nail x="-1096" y="-705"/>
			<nail x="-2252" y="-705"/>
			<nail x="-2252" y="-280"/>
		</transition>
		<transition id="id57">
			<source ref="id40"/>
			<target ref="id47"/>
			<label kind="guard" x="-1419" y="-76">can_move_anywhere()</label>
		</transition>
		<transition id="id58">
			<source ref="id46"/>
			<target ref="id37"/>
			<label kind="guard" x="-2167" y="-637">x &gt;= Tzr + getDistance()</label>
			<label kind="assignment" x="-2167" y="-620">safe()</label>
			<nail x="-2184" y="-646"/>
		</transition>
		<transition id="id59">
			<source ref="id44"/>
			<target ref="id46"/>
			<label kind="synchronisation" x="-1419" y="-603">dead?</label>
		</transition>
		<transition id="id60">
			<source ref="id44"/>
			<target ref="id37"/>
			<label kind="guard" x="-2167" y="-552">x &gt;= Tzr + getDistance()</label>
			<label kind="synchronisation" x="-2167" y="-535">youAreSafe!</label>
			<label kind="assignment" x="-2167" y="-518">assistanceFinished(), safe()</label>
			<nail x="-1428" y="-561"/>
			<nail x="-2184" y="-561"/>
		</transition>
		<transition id="id61">
			<source ref="id43"/>
			<target ref="id45"/>
			<label kind="guard" x="-1334" y="-306">!amZeroResponder()</label>
		</transition>
		<transition id="id62">
			<source ref="id43"/>
			<target ref="id44"/>
			<label kind="guard" x="-1589" y="-382">amZeroResponder()</label>
			<label kind="synchronisation" x="-1538" y="-365">assistance!</label>
			<label kind="assignment" x="-1487" y="-348">x = 0</label>
		</transition>
		<transition id="id63">
			<source ref="id40"/>
			<target ref="id43"/>
			<label kind="synchronisation" x="-1564" y="-212">communication?</label>
		</transition>
		<transition id="id64">
			<source ref="id42"/>
			<target ref="id37"/>
			<label kind="synchronisation" x="-2159" y="-323">youAreSafe?, safe!</label>
			<label kind="assignment" x="-2108" y="-306">safe()</label>
		</transition>
		<transition id="id65">
			<source ref="id42"/>
			<target ref="id41"/>
			<label kind="guard" x="-1980" y="-399">x &gt;= Tv</label>
			<label kind="synchronisation" x="-1963" y="-365">dead!</label>
			<label kind="assignment" x="-1972" y="-382">dead()</label>
		</transition>
		<transition id="id66">
			<source ref="id39"/>
			<target ref="id42"/>
			<label kind="synchronisation" x="-1929" y="-323">assistance?</label>
			<label kind="assignment" x="-1946" y="-306">inAssistance()</label>
		</transition>
		<transition id="id67">
			<source ref="id39"/>
			<target ref="id41"/>
			<label kind="guard" x="-1759" y="-382">x &gt;= Tv</label>
			<label kind="assignment" x="-1759" y="-365">dead()</label>
		</transition>
		<transition id="id68">
			<source ref="id38"/>
			<target ref="id40"/>
			<label kind="guard" x="-1734" y="-144">!amVictim()</label>
		</transition>
		<transition id="id69">
			<source ref="id38"/>
			<target ref="id39"/>
			<label kind="guard" x="-1869" y="-212">amVictim()</label>
			<label kind="assignment" x="-1912" y="-195">victim(), x = 0</label>
		</transition>
		<transition id="id70">
			<source ref="id36"/>
			<target ref="id38"/>
			<label kind="guard" x="-2150" y="-144">!amSafe()</label>
		</transition>
		<transition id="id71">
			<source ref="id36"/>
			<target ref="id37"/>
			<label kind="guard" x="-2261" y="-229">amSafe()</label>
			<label kind="assignment" x="-2252" y="-212">safe()</label>
		</transition>
		<transition id="id72">
			<source ref="id35"/>
			<target ref="id36"/>
			<label kind="synchronisation" x="-2303" y="-144">ready?</label>
		</transition>
	</template>
	<system>// Place template instantiations here.
DroneProcess = Drone(droneId, droneNv);
FirstResponderProcess = FirstResponder(firstResponderId, firstResponderTfr);
CivilianProcess = Civilian(civilianId, civilianTv, civilianTzr);

// List one or more processes to be composed into a system.
system DroneProcess, FirstResponderProcess, CivilianProcess;

</system>
	<queries>
		<query>
			<formula/>
			<comment/>
		</query>
	</queries>
</nta>
