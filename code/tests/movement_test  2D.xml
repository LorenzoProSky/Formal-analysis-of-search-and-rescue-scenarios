<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE nta PUBLIC '-//Uppaal Team//DTD Flat System 1.6//EN' 'http://www.it.uu.se/research/group/darts/uppaal/flat-1_6.dtd'>
<nta>
	<declaration>// Place global declarations here.
const int GRID_SIZE = 3;
const int N_PERSONS = 3;

int grid[GRID_SIZE][GRID_SIZE] = {{1,0,0},{0,1,0},{0,0,1}};

typedef struct {
    int r;
    int c;
} Position;

broadcast chan init_c;

Position p_position[N_PERSONS];

Position p1;
Position p2;
Position p3;

void initialize_positions() {
    p1.r = 0;
    p1.c = 0;
    p2.r = 1;
    p2.c = 1;
    p3.r = 2;
    p3.c = 2;

    p_position[0] = p1;
    p_position[1] = p2;
    p_position[2] = p3;
}

int sum_array(){
  int somma = 0;
  for (i : int[0,GRID_SIZE-1]) {
    for (j : int[0,GRID_SIZE-1]) {
        somma = somma + grid[i][j];
    }
  }
  return somma;
}</declaration>
	<template>
		<name x="5" y="5">Civilian</name>
		<parameter>int person_id</parameter>
		<declaration>// Place local declarations here.

bool can_move_up(){
    Position current_position = p_position[person_id];
    if (current_position.r == GRID_SIZE - 1) return false;
    else return grid[current_position.r + 1][current_position.c] == 0;
}

bool can_move_down(){
    Position current_position = p_position[person_id];
    if (current_position.r == 0) return false;
    else return grid[current_position.r - 1][current_position.c] == 0;
}

bool can_move_right(){
    Position current_position = p_position[person_id];
    if (current_position.c == GRID_SIZE - 1) return false;
    else return grid[current_position.r][current_position.c + 1] == 0;
}

bool can_move_left(){
    Position current_position = p_position[person_id];
    if (current_position.c == 0) return false;
    else return grid[current_position.r][current_position.c - 1] == 0;
}

void move_right(){
    Position current_position = p_position[person_id];
    grid[current_position.r][current_position.c] = 0; // libero la vecchia posizione
    p_position[person_id].c++;
    grid[current_position.r][current_position.c + 1] = 1; // occupo la nuova posizione
}

void move_left(){
    Position current_position = p_position[person_id];
    grid[current_position.r][current_position.c] = 0; // libero la vecchia posizione
    p_position[person_id].c--;
    grid[current_position.r][current_position.c - 1] = 1; // occupo la nuova posizione
}

void move_up(){
    Position current_position = p_position[person_id];
    grid[current_position.r][current_position.c] = 0; // libero la vecchia posizione
    p_position[person_id].r++;
    grid[current_position.r + 1][current_position.c] = 1; // occupo la nuova posizione
}

void move_down(){
    Position current_position = p_position[person_id];
    grid[current_position.r][current_position.c] = 0; // libero la vecchia posizione
    p_position[person_id].r--;
    grid[current_position.r - 1][current_position.c] = 1; // occupo la nuova posizione
}</declaration>
		<location id="id0" x="-1343" y="-34">
		</location>
		<location id="id1" x="-1037" y="-34">
		</location>
		<location id="id2" x="-1657" y="-34">
		</location>
		<init ref="id2"/>
		<transition id="id3">
			<source ref="id2"/>
			<target ref="id0"/>
			<label kind="synchronisation" x="-1547" y="-59">init_c?</label>
		</transition>
		<transition id="id4">
			<source ref="id0"/>
			<target ref="id1"/>
			<label kind="guard" x="-1265" y="-467">can_move_right()</label>
			<label kind="assignment" x="-1265" y="-433">move_right()</label>
			<nail x="-1283" y="-433"/>
			<nail x="-1122" y="-433"/>
		</transition>
		<transition id="id5">
			<source ref="id0"/>
			<target ref="id1"/>
			<label kind="guard" x="-1265" y="-323">can_move_left()</label>
			<label kind="assignment" x="-1265" y="-289">move_left()</label>
			<nail x="-1283" y="-289"/>
			<nail x="-1130" y="-289"/>
		</transition>
		<transition id="id6">
			<source ref="id1"/>
			<target ref="id0"/>
			<nail x="-1079" y="144"/>
			<nail x="-1283" y="144"/>
		</transition>
		<transition id="id7">
			<source ref="id0"/>
			<target ref="id1"/>
			<label kind="guard" x="-1249" y="-68">can_move_down()</label>
			<label kind="assignment" x="-1241" y="-25">move_down()</label>
		</transition>
		<transition id="id8">
			<source ref="id0"/>
			<target ref="id1"/>
			<label kind="guard" x="-1258" y="-187">can_move_up()</label>
			<label kind="assignment" x="-1258" y="-212">move_up()</label>
			<nail x="-1258" y="-153"/>
			<nail x="-1139" y="-153"/>
		</transition>
	</template>
	<template>
		<name>Initializer</name>
		<location id="id9" x="0" y="0">
		</location>
		<location id="id10" x="195" y="0">
		</location>
		<init ref="id9"/>
		<transition id="id11">
			<source ref="id9"/>
			<target ref="id10"/>
			<label kind="synchronisation" x="18" y="-17">init_c!</label>
			<label kind="assignment" x="17" y="0">initialize_positions()</label>
		</transition>
	</template>
	<system>// Place template instantiations here.
P1 = Civilian(0);
P2 = Civilian(1);
P3 = Civilian(2);
I = Initializer();

// List one or more processes to be composed into a system.
system P1, P2, P3, I;
</system>
	<queries>
		<query>
			<formula>A[] sum_array() == 3</formula>
			<comment>Verifica che i processi non possano finire sullo stesso posto.</comment>
			<result outcome="success" type="quality" timestamp="2024-06-03 22:13:11 +0200">
			</result>
		</query>
	</queries>
</nta>
