<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE nta PUBLIC '-//Uppaal Team//DTD Flat System 1.6//EN' 'http://www.it.uu.se/research/group/darts/uppaal/flat-1_6.dtd'>
<nta>
	<declaration>// Global declaration
// System features
const int N_ROW = 10;
const int N_COL = 8;
const int N_DRONE = 3;
const int N_FIRST_RESPONDER = 3;
const int N_CIVILIAN = 3;

const int drone_Nv = 3;
const int drone_Nvs[N_DRONE] = [];
const int first_responder_Tfrs[N_FIRST_RESPONDER] = [];
const int civilian_Tvs[N_CIVILIAN] = [];
const int civilians_Tzrs[N_CIVILIAN] = [];

// Variable Declaration
int map[N_ROW][N_COL];
int drone_id[N_DRONE]; // Bisogna inizializzare con dei valori univoci prima dell'avvio del system declarations
int civialian_id[N_CIVILIAN]; // DA 0 a N_CIVILIAN - 1
int first_responder_id[N_FIRST_RESPONDER]; // DA N_CIVILIAN A N_CIVILIAN + N_FIRST_RESPONDER - 1
const int MAX_ARRAY_SIZE = N_FIRST_RESPONDER + N_CIVILIAN;


// ---- COMMUNICATION ----
// Channel declaration
chan broadcast initialization_completed;
urgent chan drone_msg_zero_responder[N_CIVILIAN];
urgent chan drone_msg_contact_first_responder[N_CIVILIAN];
urgent chan rescue_msg[N_CIVILIAN];
urgent chan rescue_completed_msg[N_CIVILIAN];
urgent chan casualty_msg[N_CIVILIAN];
urgent chan civilian_contact_msg[N_FIRST_RESPONDER];

typedef struct {
    int target_id;
    // Implicit recipient_id
} msg_single;
typedef struct {
    msg_single message;
} inbox_single;
struct {
    inbox_single inboxes[N_CIVILIAN];
} global_drone_communication;

void sendMessageSingle(int target_id, int recipient_id) {
    msg_single new_message = {target_id};
    global_drone_communication[recipient_id].message = new_message;
    // Cannot be conflicts since, only 1 drone at a time makes a decision
}
int readMessageSingle(int recipient_id) {
    msg_single recipient_message = global_drone_communication.inboxes[recipient_id].message;
    msg_single empty_message = {-1};
    global_drone_communication.inboxes[recipient_id].message = empty_message;
    return recipient_message.target_id;
}

typedef struct {
    int victim_id;
    int survivor_id;
    // Implicit recipient_id
} msg_double;
typedef struct {
    msg_double message;
} inbox_double;
struct {
    inbox_double inboxes[N_FIRST_RESPONDER];
} global_civilian_contact_communication;

void sendMessageDouble(int victim_id, int survivor_id, int recipient_id) {
    msg_double new_message = {victim_id, survivor_id};
    global_civilian_contact_communication[recipient_id - N_FIRST_RESPONDER].message = new_message;
}
msg_double readMessageDouble(int recipient_id) {
    msg_double recipient_message = global_civilian_contact_communication[recipient_id - N_FIRST_RESPONDER].message;
    msg_double empty_message = {-1,-1};
    global_civilian_contact_communication[recipient_id - N_FIRST_RESPONDER].message = empty_message;
    return recipient_message;
}

void initializeGlobalCommunication()  {
    msg_single empty_message_single = {-1};
    for (i : int[0,N_CIVILIAN - 1]) {
        global_drone_communication[i].message = empty_message_single;
    }
    msg_double empty_message_double = {-1,-1};
    for (i : int[0,N_FIRST_RESPONDERS - 1]) {
        global_civilian_contact_communication[i].message = empty_message_double;
    }
}

// ---- POSITIONS ----

// Cell value type
const int FREE = 0;
const int FIRE = 1;
const int FIRST_RESPONDER = 2;
const int CIVILIAN = 3;
const int EXIT = 4;
const int ZERO_RESPONDER = 5;
const int IN_ASSISTANCE = 6;
const int VICTIM = 7;

// Directions
const int UP = 0;
const int RIGHT = 0;
const int DOWN = 0;
const int LEFT = 0;

// int DRONE = 2; NON c'è bisogno del drone perché nessuno deve leggere la posizione dei droni inoltre bisognerebbe aggiungere una ulteriore costante per indicare quando il drone si trova sopra a qualcun / qualcos altro che è un casotto. Così prendiamo due piccioni con una fava visto che non dobbiamo neanche aggiornare la posizione del drone sulla mappa.

Position c_position[N_CIVILIAN]; // civilians positions
Position d_position[N_DRONE]; // drones positions
Position f_position[N_FIRST_RESPONDER]; // first responders positions

typedef struct {
    int r;
    int c;
} Position;

// Drones positions
Position d1;
Position d2;
Position d3;

// Civilians positions
Position c1;
Position c2;
Position c3;

// First responders positions
Position f1;
Position f2;
Position f3;

// Initialize the positions of drones and people
void initializePositions() {
    
    // initialize drone positions
    d1.r = 0;
    d1.c = 0;
    d2.r = 1;
    d2.c = 1;
    d3.r = 2;
    d3.c = 2;
    d_position[0] = d1;
    d_position[1] = d2;
    d_position[2] = d3;

    // initialize civilian positions
    c1.r = 0;
    c1.c = 0;
    c2.r = 1;
    c2.c = 1;
    c3.r = 2;
    c3.c = 2;
    c_position[0] = d1;
    c_position[1] = d2;
    c_position[2] = d3;

    // initialize first responders positions
    f1.r = 0;
    f1.c = 0;
    f2.r = 1;
    f2.c = 1;
    f3.r = 2;
    f3.c = 2;
    f_position[0] = d1;
    f_position[1] = d2;
    f_position[2] = d3;

    // map initialization the top left cell is at position (0,0) and the bottom right is at (N_ROW - 1, N_COL - 1)
    map = {
        {0,0,0,0,0,0,0,2},
        {0,1,1,0,0,0,0,0},
        {0,1,1,7,0,0,0,0},
        {0,0,1,1,0,0,0,0},
        {0,3,0,0,0,0,0,0},
        {0,0,0,0,0,3,0,0},
        {0,0,0,0,0,0,0,0},
        {0,0,2,0,0,0,0,0},
        {0,0,0,0,0,0,0,0},
        {0,0,0,0,0,0,4,4},
    }

}

// checks if a entity can move in the provided direction
bool canMoveGeneral(int direction, int&amp; positions[MAX_ARRAY_SIZE], int person_id) {

    Position current_position = positions[person_id];
    int new_r = current_position.r;
    int new_c = current_position.c;

    // Calculate new position based on direction
    if (direction == UP) new_r++;
    else if (direction == RIGHT) new_c++;
    else if (direction == DOWN) new_r--;
    else if (direction == LEFT) new_c--;

    // Check if new position is within grid bounds
    if (new_r &lt; 0 || new_r &gt;= GRID_SIZE || new_c &lt; 0 || new_c &gt;= GRID_SIZE) 
        return false;

    // Check if new position is empty in the grid
    if (grid[new_r][new_c] != 0) 
        return false;

    // Check if any other person is in the target position (redundant as the grid check is sufficient)
    //for (i : int[0, N_PERSONS-1]) {
    //    if (i != person_id &amp;&amp; 
    //        p_position[i].r == new_r &amp;&amp; 
    //        p_position[i].c == new_c) {
    //        return false;
    //    }
    //}

    return true;
}

// move in the provided direction
// positions is the array that containts the position for the various Templates i.e. Drone, FirstResponder, Civilian
void moveGeneral(int direction, int&amp; positions[MAX_ARRAY_SIZE], int person_id) {

    Position current_position = positions[person_id];
    int new_r = current_position.r;
    int new_c = current_position.c;

    // Calculate new position based on direction
    if (direction == UP) new_r++;
    else if (direction == RIGHT) new_c++;
    else if (direction == DOWN) new_r--;
    else if (direction == LEFT) new_c--;

    // Update position
    positions[person_id].r = new_r;
    positions[person_id].c = new_c;

    // Update grid
    grid[new_r][new_c] = 1;  // occupy new position
    grid[current_position.r][current_position.c] = 0;  // free old position

}

// return the distance between source and target
int getDistance(source_id, target_id) {

}

// Helper function to calculate Manhattan distance
int calculateDistance(Position pos1, Position pos2) {
    int dr = pos1.r - pos2.r;
    int dc = pos1.c - pos2.c;
    return (dr &gt; 0 ? dr : -dr) + (dc &gt; 0 ? dc : -dc);
}

// ---- HELPER FUNCTIONS FOR THE QUERIES ----

// checks that the positions of the civialins are different
bool areDifferent(){

  Position p;
  for (i : int[0,N_PERSONS-1]) {
    p = c_position[i];
    for (j : int[0,N_PERSONS-1]) {
        if(p.r == c_position[j].r &amp;&amp; p.c == c_position[j].c &amp;&amp; i != j &amp;&amp; p.r != 0 &amp;&amp; p.c != 0) {
            return false;
        }
    }
  }
  return true;

}</declaration>
	<template>
		<name>Initializer</name>
		<declaration>void initialization() {
    initializePositions();
    initializeGlobalDroneCommunication();
}</declaration>
		<location id="id0" x="-561" y="-68">
			<committed/>
		</location>
		<location id="id1" x="-272" y="-68">
		</location>
		<init ref="id0"/>
		<transition id="id2">
			<source ref="id0"/>
			<target ref="id1"/>
			<label kind="synchronisation" x="-527" y="-102">initialization_completed!</label>
			<label kind="assignment" x="-527" y="-119">initialization()</label>
		</transition>
	</template>
	<template>
		<name x="5" y="5">Drone</name>
		<parameter>const int drone_id, const int nv</parameter>
		<declaration>// ---- Private drone's variables ----
int detected_survivor_id = -1;
int detected_victim_id = -1;
int direction = 1; // current movement direction of the drone (1 = UP, -1 = DOWN)

// ---- Private drone's funtions ----

// Drone moving policy
void move() { 
    
    // get current drone position
    Position current_position = d_position[drone_id];
    
    // if the drone is at the top or the bottom of the grid change direction
    if (current_position.r == N_ROW - 1) {
        direction = -1;
        return;
    } else if (current_position.r == 0) {
        direction = 1;
        return;
    }

    // fly in the direction 
    d_position[drone_id].r = d_position[drone_id].r + direction; // update the drone's position  
   
}

// Look for the survivor and victim in range and update the inner values
// If more then one civilian or victim are detected only the closest to the Drones are saved.
void detect() {
    Position current_position = d_position[drone_id];
    int row, col;
    
    // Reset detection variables
    detected_survivor_id = -1;
    detected_victim_id = -1;
    
    int closest_survivor_distance = drone_Nv + 1; // Initialize with a distance greater than Nv
    int closest_victim_distance = drone_Nv + ;
    
    // Scan a Nv-cell radius around the drone
    for (row : int[current_position.r - drone_Nv, current_position.r + drone_Nv]) {
        for (col : int[current_position.c - drone_Nv, current_position.c + drone_Nv]) {
            // Check if the cell is within the grid boundaries
            if (row &gt;= 0 &amp;&amp; row &lt; N_ROW &amp;&amp; col &gt;= 0 &amp;&amp; col &lt; N_COL) {
                Position cell_position = {row, col};
                int distance = calculateDistance(current_position, cell_position);
                
                // Check for survivors (CIVILIAN)
                if (map[row][col] == CIVILIAN) {
                    for (i : int[0, N_CIVILIAN - 1]) {
                        if (c_position[i].r == row &amp;&amp; c_position[i].c == col) {
                            if (distance &lt; closest_survivor_distance) {
                                detected_survivor_id = civilian_id[i];
                                closest_survivor_distance = distance;
                            }
                            break;
                        }
                    }
                }
                // Check for victims (VICTIM)
                else if (map[row][col] == VICTIM) {
                    for (i : int[0, N_CIVILIAN - 1]) {
                        if (c_position[i].r == row &amp;&amp; c_position[i].c == col) {
                            if (distance &lt; closest_victim_distance) {
                                detected_victim_id = civilian_id[i];
                                closest_victim_distance = distance;
                            }
                            break;
                        }
                    }
                }
            }
        }
    }
}

bool foundCivilians() {
    if(detected_survivor_id != -1 &amp;&amp; detected_victim_id != -1) return true;
    return false;
}

void communicationCompleted() {
    detected_survivor_id = -1;
    detected_victim_id = -1;
}</declaration>
		<location id="id3" x="-2082" y="-1521">
		</location>
		<location id="id4" x="-1810" y="-1521">
		</location>
		<location id="id5" x="-1249" y="-1521">
			<committed/>
		</location>
		<location id="id6" x="-1249" y="-1674">
			<label kind="comments" x="-1249" y="-1716">Implicit random decison policy.</label>
			<committed/>
		</location>
		<location id="id7" x="-1249" y="-1360">
			<name x="-1232" y="-1385">Patrolling</name>
		</location>
		<location id="id8" x="-1810" y="-1674">
			<committed/>
		</location>
		<init ref="id3"/>
		<transition id="id9">
			<source ref="id6"/>
			<target ref="id8"/>
			<label kind="synchronisation" x="-1742" y="-1759">drone_msg_zero_responder[detected_survivor_id]!</label>
			<label kind="assignment" x="-1691" y="-1742">sendMessageSingle(detected_victim_id)</label>
			<nail x="-1530" y="-1717"/>
		</transition>
		<transition id="id10">
			<source ref="id6"/>
			<target ref="id8"/>
			<label kind="synchronisation" x="-1768" y="-1632">drone_msg_contact_first_responder[detected_survivor_id]!</label>
			<label kind="assignment" x="-1691" y="-1615">sendMessageSingle(detected_victim_id)</label>
			<nail x="-1530" y="-1632"/>
		</transition>
		<transition id="id11">
			<source ref="id8"/>
			<target ref="id4"/>
			<label kind="assignment" x="-2031" y="-1606">communicationCompleted()</label>
		</transition>
		<transition id="id12">
			<source ref="id7"/>
			<target ref="id4"/>
			<label kind="assignment" x="-1564" y="-1385">move()</label>
			<nail x="-1810" y="-1360"/>
		</transition>
		<transition id="id13">
			<source ref="id5"/>
			<target ref="id7"/>
			<label kind="guard" x="-1241" y="-1445">!foundCivilians()</label>
		</transition>
		<transition id="id14">
			<source ref="id5"/>
			<target ref="id6"/>
			<label kind="guard" x="-1241" y="-1598">foundCivilians()</label>
		</transition>
		<transition id="id15">
			<source ref="id4"/>
			<target ref="id5"/>
			<label kind="assignment" x="-1572" y="-1547">detect()</label>
		</transition>
		<transition id="id16">
			<source ref="id3"/>
			<target ref="id4"/>
			<label kind="synchronisation" x="-2057" y="-1547">initialization_completed?</label>
		</transition>
	</template>
	<template>
		<name>FirstResponder</name>
		<parameter>const int first_responder_id, const int tfr</parameter>
		<declaration>// ---- Private First-Responder's variables ----
clock x;
int detected_victim_id = -1;
int contacting_survivor_id = -1;

// ---- Private First-Responder's functions ----
bool canMove(int direction) {
    return canMoveGeneral(direction, f_position, Id);
}

void move(int direction){
    moveGeneral(direction, f_position, Id);
}

bool canMoveAnywhere() {
    return canMove(UP) || canMove(RIGHT) || canMove(DOWN) || canMove(LEFT);
}

// Checks if there is a victim within a 1-cell range.
// If there is it saves its id in detected_victim_id.
// If there are more then one victim within the 1-cell range
// the choice of victim id to save is random.
void detect() {
    Position current_position = f_position[first_responder_id];
    int row, col;
    
    // Reset detection variable
    detected_victim_id = -1;
    
    // Check all adjacent cells (including diagonals)
    for (row = current_position.r - 1; row &lt;= current_position.r + 1; row++) {
        for (col = current_position.c - 1; col &lt;= current_position.c + 1; col++) {
            // Skip checking the current position
            if (row == current_position.r &amp;&amp; col == current_position.c) {
                continue;
            }
            
            // Check if the cell is within the grid boundaries
            if (row &gt;= 0 &amp;&amp; row &lt; N_ROW &amp;&amp; col &gt;= 0 &amp;&amp; col &lt; N_COL) {
                // Check if the cell contains a victim
                if (map[row][col] == VICTIM) {
                    // Find which civilian is at this position
                    for (int i = 0; i &lt; N_CIVILIAN; i++) {
                        if (c_position[i].r == row &amp;&amp; c_position[i].c == col) {
                            detected_victim_id = civilian_id[i];
                            return; // Exit the function after finding the first victim
                        }
                    }
                }
            }
        }
    }
}

bool foundVictim() {
    if(detected_victim_id != -1) return true;
    return false;
}

void prepareNewRescue() {
    detected_victim_id = -1;
    contacting_survivor_id = -1;
}

void readMessageFromContactingCivilian() {
    msg_double message = readMessageDouble(first_responder_id);
    detected_victim_id = message.victim_id;
    contacting_survivor_id = message.survivor_id;
}</declaration>
		<location id="id17" x="-1020" y="-1487">
			<name x="-1122" y="-1513">Wandering</name>
		</location>
		<location id="id18" x="-1487" y="-1793">
		</location>
		<location id="id19" x="-1020" y="-1606">
			<committed/>
		</location>
		<location id="id20" x="-1300" y="-1606">
		</location>
		<location id="id21" x="-459" y="-1606">
			<name x="-442" y="-1631">Assisting</name>
			<label kind="invariant" x="-495" y="-1589">x &lt;= tfr</label>
		</location>
		<location id="id22" x="-1819" y="-1606">
			<committed/>
		</location>
		<location id="id23" x="-1819" y="-1444">
			<name x="-1802" y="-1470">Assisting_Contact</name>
			<label kind="invariant" x="-1802" y="-1436">x &lt;= tfr
+ getDistance(contacting_survivor_id,first_responder_id)
+ getDistance(first_responder_id,detected_victim_id)</label>
		</location>
		<location id="id24" x="-1819" y="-960">
			<label kind="invariant" x="-1810" y="-943">x &lt;= tfr
+ getDistance(contacting_survivor_id,first_responder_id)
+ getDistance(first_responder_id,detected_victim_id)</label>
			<label kind="comments" x="-1802" y="-1011">If the victim dies
=&gt; Finish rescue of the contacting_survivor</label>
		</location>
		<init ref="id18"/>
		<transition id="id25">
			<source ref="id24"/>
			<target ref="id20"/>
			<label kind="guard" x="-1283" y="-1138">x &gt;= tfr
+ getDistance(contacting_survivor_id,first_responder_id)
+ getDistance(first_responder_id,detected_victim_id)</label>
			<label kind="synchronisation" x="-1283" y="-1070">rescue_completed_msg[contacting_survivor_id]!</label>
			<label kind="assignment" x="-1283" y="-1045">prepareNewRescue()</label>
			<nail x="-1300" y="-960"/>
		</transition>
		<transition id="id26">
			<source ref="id23"/>
			<target ref="id24"/>
			<label kind="guard" x="-1810" y="-1138">x &lt; tfr
+ getDistance(contacting_survivor_id,first_responder_id)
+ getDistance(first_responder_id,detected_victim_id)</label>
			<label kind="synchronisation" x="-1810" y="-1070">casualty_msg[detected_victim_id]?</label>
		</transition>
		<transition id="id27">
			<source ref="id23"/>
			<target ref="id20"/>
			<label kind="guard" x="-1802" y="-1334">x &gt;= tfr
+ getDistance(contacting_survivor_id,first_responder_id)
+ getDistance(first_responder_id,detected_victim_id)</label>
			<label kind="synchronisation" x="-1802" y="-1266">rescue_completed_msg[detected_victim_id]!
rescue_completed_msg[contacting_survivor_id]!</label>
			<label kind="assignment" x="-1802" y="-1223">prepareNewRescue()</label>
			<nail x="-1820" y="-1189"/>
			<nail x="-1301" y="-1189"/>
		</transition>
		<transition id="id28">
			<source ref="id22"/>
			<target ref="id23"/>
			<label kind="assignment" x="-1802" y="-1546">readMessageFromContactingCivilian(),
x = 0</label>
		</transition>
		<transition id="id29">
			<source ref="id20"/>
			<target ref="id22"/>
			<label kind="synchronisation" x="-1785" y="-1597">civilian_contact_msg[first_responder_id]?</label>
		</transition>
		<transition id="id30">
			<source ref="id19"/>
			<target ref="id21"/>
			<label kind="guard" x="-960" y="-1665">foundVictim()</label>
			<label kind="synchronisation" x="-960" y="-1648">rescue_msg[detected_victim_id]!</label>
			<label kind="assignment" x="-960" y="-1631">x = 0</label>
		</transition>
		<transition id="id31">
			<source ref="id17"/>
			<target ref="id20"/>
			<label kind="guard" x="-1258" y="-1351">canMove(LEFT)</label>
			<label kind="assignment" x="-1132" y="-1351">move(LEFT)</label>
			<nail x="-1020" y="-1326"/>
			<nail x="-1300" y="-1326"/>
		</transition>
		<transition id="id32">
			<source ref="id17"/>
			<target ref="id20"/>
			<label kind="guard" x="-1274" y="-1393">canMove(RIGHT)</label>
			<label kind="assignment" x="-1139" y="-1393">move(RIGHT)</label>
			<nail x="-1020" y="-1368"/>
			<nail x="-1300" y="-1368"/>
		</transition>
		<transition id="id33">
			<source ref="id17"/>
			<target ref="id20"/>
			<label kind="guard" x="-1256" y="-1436">canMove(DOWN)</label>
			<label kind="assignment" x="-1130" y="-1436">move(DOWN)</label>
			<nail x="-1020" y="-1411"/>
			<nail x="-1300" y="-1411"/>
		</transition>
		<transition id="id34">
			<source ref="id17"/>
			<target ref="id20"/>
			<label kind="guard" x="-1223" y="-1479">canMove(UP)</label>
			<label kind="assignment" x="-1113" y="-1479">move(UP)</label>
			<nail x="-1020" y="-1453"/>
			<nail x="-1300" y="-1453"/>
		</transition>
		<transition id="id35">
			<source ref="id21"/>
			<target ref="id20"/>
			<label kind="synchronisation" x="-756" y="-1793">casualty_msg[detected_victim_id]?</label>
			<label kind="assignment" x="-629" y="-1776">prepareNewRescue()</label>
			<nail x="-461" y="-1801"/>
			<nail x="-1300" y="-1801"/>
		</transition>
		<transition id="id36">
			<source ref="id21"/>
			<target ref="id20"/>
			<label kind="guard" x="-546" y="-1716">x &gt;= tfr</label>
			<label kind="synchronisation" x="-824" y="-1700">rescue_completed_msg[detected_victim_id]!</label>
			<label kind="assignment" x="-629" y="-1682">prepareNewRescue()</label>
			<nail x="-461" y="-1725"/>
			<nail x="-1300" y="-1725"/>
		</transition>
		<transition id="id37">
			<source ref="id20"/>
			<target ref="id19"/>
			<label kind="assignment" x="-1198" y="-1631">detect()</label>
		</transition>
		<transition id="id38">
			<source ref="id18"/>
			<target ref="id20"/>
			<label kind="synchronisation" x="-1623" y="-1708">initialization_completed?</label>
		</transition>
		<transition id="id39">
			<source ref="id19"/>
			<target ref="id17"/>
			<label kind="guard" x="-1198" y="-1572">!foundVictim() &amp;&amp; 
canMoveAnywhere()</label>
		</transition>
	</template>
	<template>
		<name>Civilian</name>
		<parameter>const int civilian_id, const int tv, const int tzr</parameter>
		<declaration>// ---- Private Civilian's variables ----
clock x;
int target_id = -1;
int closest_first_responder_id = -1;

// ---- Private Civilian's variables ----
bool canMove(int direction) {
    return canMoveGeneral(direction, c_position, Id);
}

void move(int direction){
    moveGeneral(direction, c_position, Id);
}

bool canMoveAnywhere() {
    return canMove(UP) || canMove(RIGHT) || canMove(DOWN) || canMove(LEFT);
}

// checks wether there is an entity "type" in the "radius"
bool checkNeighbor(int radius, int type){
    Position current_position = c_position[civilian_id];
    
    // Check all adjacent cells (including diagonals)
    for (int row = current_position.r - radius; row &lt;= current_position.r + radius; row++) {
        for (int col = current_position.c - radius; col &lt;= current_position.c + radius; col++) {
            // Skip checking the current position
            if (row == current_position.r &amp;&amp; col == current_position.c) {
                continue;
            }
            
            // Check if the cell is within the grid boundaries
            if (row &gt;= 0 &amp;&amp; row &lt; N_ROW &amp;&amp; col &gt;= 0 &amp;&amp; col &lt; N_COL) {
                if (map[row][col] == type) {
                    return true;
                }
            }
        }
    }
    return false;
}

// Check if the civilian is near an exit
bool amSafe() {
    checkNeighbor(1, EXIT);
}

// Mark the civilian as saved on the map
void safe() {
    Position current_position = c_position[civilian_id];
    map[current_position.r][current_position.c] = FREE;
    // update any metrics or counters
}

// Check if the civilian is near a fire
bool amVictim() {
    checkNeighbor(1, FIRE);
}

// Mark the civilian as victim in need of assistance
void victim() {
    Position current_position = c_position[civilian_id];
    map[current_position.r][current_position.c] = VICTIM;
}

// Mark the civilian as casualty on the map
void casualty() {
    Position current_position = c_position[civilian_id];
    map[current_position.r][current_position.c] = FREE;
    // You might want to add code here to update any metrics or counters
}

// Mark the civilian as in assistance
void inAssistance() {
    Position current_position = c_position[civilian_id];
    map[current_position.r][current_position.c] = IN_ASSISTANCE;
}

// Mark the civilian as zero-responder
void zeroResponder() {
    Position current_position = c_position[civilian_id];
    map[current_position.r][current_position.c] = ZERO_RESPONDER;
}

// Mark the civilian as in contact with a first-responder
void inContact() {
    // This function doesn't change the map state, but you might want to
    // update some other variable or metric to track this state
}

// Find the closest first responder and update the private var
void findClosestFirstResponder() {
    Position current_position = c_position[civilian_id];
    int closest_distance = N_ROW + N_COL; // Initialize with maximum possible distance
    
    for (int i = 0; i &lt; N_FIRST_RESPONDER; i++) {
        Position responder_position = f_position[i];
        int dr = current_position.r - responder_position.r;
        int dc = current_position.c - responder_position.c;
        
        // Calculate absolute values without using abs()
        if (dr &lt; 0) dr = -dr;
        if (dc &lt; 0) dc = -dc;
        
        int distance = dr + dc;
        
        if (distance &lt; closest_distance) {
            closest_distance = distance;
            closest_first_responder_id = first_responder_id[i];
        }
    }
}</declaration>
		<location id="id40" x="-2660" y="-935">
		</location>
		<location id="id41" x="-2303" y="-935">
			<committed/>
		</location>
		<location id="id42" x="-2303" y="-1096">
			<name x="-2354" y="-1122">Safe</name>
			<committed/>
		</location>
		<location id="id43" x="-1716" y="-935">
			<committed/>
		</location>
		<location id="id44" x="-1716" y="-1096">
			<name x="-1700" y="-1122">Victim</name>
			<label kind="invariant" x="-1700" y="-1088">x &lt;= tv</label>
		</location>
		<location id="id45" x="-1368" y="-935">
			<label kind="comments" x="-1351" y="-892">Will choose an urgent channel first.
Only one of the 2 channels can be active in a time instant.</label>
			<committed/>
		</location>
		<location id="id46" x="-1716" y="-1266">
			<name x="-1750" y="-1300">Casualty</name>
			<committed/>
		</location>
		<location id="id47" x="-2133" y="-1096">
		</location>
		<location id="id48" x="-1368" y="-1045">
			<committed/>
		</location>
		<location id="id49" x="-1368" y="-1309">
			<name x="-1496" y="-1334">ZeroResponder</name>
			<label kind="invariant" x="-1564" y="-1292">x &lt;= tzr + getDistance(civilian_id,target_id)</label>
		</location>
		<location id="id50" x="-705" y="-1045">
			<committed/>
		</location>
		<location id="id51" x="-1368" y="-1479">
			<label kind="comments" x="-1717" y="-1470">If the victim dies, the zero-responder
finishes helping themselves.</label>
		</location>
		<location id="id52" x="-1368" y="-739">
			<name x="-1351" y="-764">Wandering</name>
		</location>
		<location id="id53" x="-705" y="-1309">
			<name x="-807" y="-1334">Contacting</name>
		</location>
		<location id="id54" x="-705" y="-1147">
			<committed/>
		</location>
		<location id="id55" x="-1368" y="-1156">
			<committed/>
		</location>
		<init ref="id40"/>
		<transition id="id56">
			<source ref="id53"/>
			<target ref="id42"/>
			<label kind="synchronisation" x="-1020" y="-1504">rescue_completed_msg[civilian_id]?</label>
			<label kind="assignment" x="-773" y="-1487">safe()</label>
			<nail x="-705" y="-1521"/>
			<nail x="-2303" y="-1521"/>
		</transition>
		<transition id="id57">
			<source ref="id54"/>
			<target ref="id53"/>
			<label kind="synchronisation" x="-1249" y="-1224">civilian_contact_msg[closest_first_responder_id - N_CIVILIAN]!</label>
			<label kind="assignment" x="-1292" y="-1207">sendMessageDouble(target_id,civilian_id,closest_first_responder_id)</label>
		</transition>
		<transition id="id58">
			<source ref="id50"/>
			<target ref="id54"/>
			<label kind="assignment" x="-1079" y="-1096">target_id = readMessageSingle(civilian_id),
findClosestFirstResponder()</label>
		</transition>
		<transition id="id59">
			<source ref="id55"/>
			<target ref="id49"/>
			<label kind="synchronisation" x="-1360" y="-1258">rescue_msg[target_id]!</label>
			<label kind="assignment" x="-1360" y="-1241">x = 0</label>
		</transition>
		<transition id="id60">
			<source ref="id48"/>
			<target ref="id55"/>
			<label kind="assignment" x="-1360" y="-1122">target_id = readMessageSingle(civilian_id)</label>
		</transition>
		<transition id="id61">
			<source ref="id45"/>
			<target ref="id50"/>
			<label kind="synchronisation" x="-1105" y="-926">drone_msg_contact_first_responder[civilian_id]?</label>
			<label kind="assignment" x="-799" y="-909">inContact()</label>
			<nail x="-705" y="-935"/>
		</transition>
		<transition id="id62">
			<source ref="id52"/>
			<target ref="id41"/>
			<label kind="guard" x="-1631" y="-611">canMove(RIGHT)</label>
			<label kind="assignment" x="-1496" y="-611">move(RIGHT)</label>
			<nail x="-1368" y="-586"/>
			<nail x="-2303" y="-586"/>
		</transition>
		<transition id="id63">
			<source ref="id52"/>
			<target ref="id41"/>
			<label kind="guard" x="-1614" y="-663">canMove(LEFT)</label>
			<label kind="assignment" x="-1487" y="-663">move(LEFT)</label>
			<nail x="-1368" y="-637"/>
			<nail x="-2303" y="-637"/>
		</transition>
		<transition id="id64">
			<source ref="id52"/>
			<target ref="id41"/>
			<label kind="guard" x="-1615" y="-713">canMove(DOWN)</label>
			<label kind="assignment" x="-1487" y="-713">move(DOWN)</label>
			<nail x="-1368" y="-688"/>
			<nail x="-2303" y="-688"/>
		</transition>
		<transition id="id65">
			<source ref="id52"/>
			<target ref="id41"/>
			<label kind="guard" x="-1581" y="-764">canMove(UP)</label>
			<label kind="assignment" x="-1470" y="-764">move(UP)</label>
			<nail x="-2303" y="-739"/>
		</transition>
		<transition id="id66">
			<source ref="id45"/>
			<target ref="id52"/>
			<label kind="guard" x="-1521" y="-875">canMoveAnywhere()</label>
		</transition>
		<transition id="id67">
			<source ref="id51"/>
			<target ref="id42"/>
			<label kind="guard" x="-2286" y="-1470">x &gt;= tzr + getDistance(civilian_id,target_id)</label>
			<label kind="assignment" x="-2286" y="-1453">safe()</label>
			<nail x="-2303" y="-1479"/>
		</transition>
		<transition id="id68">
			<source ref="id49"/>
			<target ref="id51"/>
			<label kind="synchronisation" x="-1360" y="-1436">casualty_msg[target_id]?</label>
		</transition>
		<transition id="id69">
			<source ref="id49"/>
			<target ref="id42"/>
			<label kind="guard" x="-2286" y="-1368">x &gt;= tzr + getDistance(civilian_id,target_id)</label>
			<label kind="synchronisation" x="-2287" y="-1351">rescue_completed_msg[target_id]!</label>
			<label kind="assignment" x="-2286" y="-1334">safe()</label>
			<nail x="-1368" y="-1377"/>
			<nail x="-2303" y="-1377"/>
		</transition>
		<transition id="id70">
			<source ref="id45"/>
			<target ref="id48"/>
			<label kind="synchronisation" x="-1360" y="-1003">drone_msg_zero_responder[civilian_id]?</label>
			<label kind="assignment" x="-1360" y="-986">zeroResponder()</label>
		</transition>
		<transition id="id71">
			<source ref="id47"/>
			<target ref="id42"/>
			<label kind="synchronisation" x="-2269" y="-1079">rescue_completed_msg[civilian_id]?</label>
			<label kind="assignment" x="-2269" y="-1062">safe()</label>
		</transition>
		<transition id="id72">
			<source ref="id47"/>
			<target ref="id46"/>
			<label kind="guard" x="-2116" y="-1258">x &gt;= tv</label>
			<label kind="synchronisation" x="-2116" y="-1224">casualty_msg[civilian_id]!</label>
			<label kind="assignment" x="-2116" y="-1241">casualty()</label>
			<nail x="-2133" y="-1266"/>
		</transition>
		<transition id="id73">
			<source ref="id44"/>
			<target ref="id47"/>
			<label kind="synchronisation" x="-2023" y="-1139">rescue_msg[cilian_id]?</label>
			<label kind="assignment" x="-1989" y="-1122">inAssistance()</label>
		</transition>
		<transition id="id74">
			<source ref="id44"/>
			<target ref="id46"/>
			<label kind="guard" x="-1700" y="-1215">x &gt;= tv</label>
			<label kind="assignment" x="-1700" y="-1198">casualty()</label>
		</transition>
		<transition id="id75">
			<source ref="id43"/>
			<target ref="id45"/>
			<label kind="guard" x="-1683" y="-960">!amVictim()</label>
		</transition>
		<transition id="id76">
			<source ref="id43"/>
			<target ref="id44"/>
			<label kind="guard" x="-1708" y="-1037">amVictim()</label>
			<label kind="assignment" x="-1708" y="-1020">victim(), x = 0</label>
		</transition>
		<transition id="id77">
			<source ref="id41"/>
			<target ref="id43"/>
			<label kind="guard" x="-2269" y="-960">!amSafe()</label>
		</transition>
		<transition id="id78">
			<source ref="id41"/>
			<target ref="id42"/>
			<label kind="guard" x="-2388" y="-1037">amSafe()</label>
			<label kind="assignment" x="-2371" y="-1020">safe()</label>
		</transition>
		<transition id="id79">
			<source ref="id40"/>
			<target ref="id41"/>
			<label kind="synchronisation" x="-2592" y="-960">initialization_completed?</label>
		</transition>
	</template>
	<system>// Template instantiations
DroneProcess = Drone(droneId, droneNvs);
FirstResponderProcess = FirstResponder(firstResponderId, firstResponderTfrs);
CivilianProcess = Civilian(civilianId, civilianTvs, civilianTzrs);

// List of processes to be composed into a system
system DroneProcess, FirstResponderProcess, CivilianProcess;

</system>
	<queries>
		<query>
			<formula/>
			<comment/>
		</query>
	</queries>
</nta>
