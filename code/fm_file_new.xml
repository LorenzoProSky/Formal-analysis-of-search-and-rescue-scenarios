<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE nta PUBLIC '-//Uppaal Team//DTD Flat System 1.6//EN' 'http://www.it.uu.se/research/group/darts/uppaal/flat-1_6.dtd'>
<nta>
	<declaration>// Global declaration

// ---- POSITIONS ----
// Cell value type
const int FREE = 0;
const int EXIT = 1;
const int CIVILIAN = 2;
const int FIRST_RESPONDER = 3;
const int FIRE = 4;
const int VICTIM = 5;
const int IN_ASSISTANCE = 6;
const int ZERO_RESPONDER = 7;
const int IN_CONTACT = 8;
const int ASSISTING_CONTACT = 9;
const int SAFE = 10; // In map 0
const int CASUALTY = -1; // In map 0

typedef struct {
    int r;
    int c;
} position;


// ---- DEFINITION OF THE DIFFERENT SYSTEMS ----&gt;

// &lt;---- SYSTEM 1 ----&gt;
const int N_ROW = 10;
const int N_COL = 8;
const int N_DRONE = 2;
const int N_FIRST_RESPONDER = 2;
const int N_CIVILIAN = 3;

const int drone_ids[N_DRONE] = {0,1};
const int drone_nvs[N_DRONE] = {2,2};

const int civilian_ids[N_CIVILIAN] = {0,1,2}; // 0 - N_CIVILIAN - 1
const int civilian_tvs[N_CIVILIAN] = {10,2,11};
const int civilian_tzrs[N_CIVILIAN] = {2,1,2};

const int first_responder_ids[N_FIRST_RESPONDER] = {0,1}; // 0 - N_FIRST_RESPONDER - 1
const int first_responder_tfrs[N_FIRST_RESPONDER] = {3,2};

// Arrays of positions of the entities
position c_position[N_CIVILIAN]; // Civilians positions
position d_position[N_DRONE]; // Drones positions
position f_position[N_FIRST_RESPONDER]; // First responders positions

// Map initialization of the FIRE and EXITS
// Top left cell is at position (0,0) and the bottom right is at (N_ROW - 1, N_COL - 1)
int map[N_ROW][N_COL] = {
        {0,0,0,0,0,0,0,0},
        {0,4,4,0,0,0,0,0},
        {0,4,4,0,0,0,0,0},
        {0,0,4,4,0,0,0,0},
        {0,0,0,0,0,0,0,0}, 
        {0,0,0,0,0,0,0,0},
        {0,0,0,0,0,0,0,0},
        {0,0,0,0,0,0,0,0},
        {0,0,0,0,0,0,0,0},
        {0,0,0,0,0,0,1,1}
 };

// Initialize the entities positions
void initializePositions() {
    // Drones
    position d0;
    position d1;

    // Civialians
    position c0;
    position c1;
    position c2;

    // First responders
    position f0;
    position f1;

    // Initialize drone positions
    d0.r = 0;
    d0.c = 2;
    d1.r = 0;
    d1.c = 5;
    d_position[0] = d0;
    d_position[1] = d1;

    // Initialize civilian positions
    c0.r = 2;
    c0.c = 3;
    c1.r = 2;
    c1.c = 5;
    c2.r = 3;
    c2.c = 4;
    c_position[0] = c0;
    c_position[1] = c1;
    c_position[2] = c2;

    // Initialize first responders positions
    f0.r = 1;
    f0.c = 6;
    f1.r = 7;
    f1.c = 2;
    f_position[0] = f0;
    f_position[1] = f1;
}
// &lt;---- END SYSTEM 1 ----&gt;


/*
// &lt;---- SYSTEM 2 ----&gt;
const int N_ROW = 20;
const int N_COL = 15;
const int N_DRONE = 3;
const int N_FIRST_RESPONDER = 5;
const int N_CIVILIAN = 10;

const int drone_ids[N_DRONE] = {0,1,2};
const int drone_nvs[N_DRONE] = {1,1,1};

const int civilian_ids[N_CIVILIAN] = {0,1,2,3,4,5,6,7,8,9};
const int civilian_tvs[N_CIVILIAN] = {15,18,20,22,25,17,19,21,23,24};
const int civilian_tzrs[N_CIVILIAN] = {6,6,6,6,6,6,6,6,6,6};

const int first_responder_ids[N_FIRST_RESPONDER] = {0,1,2,3,4};
const int first_responder_tfrs[N_FIRST_RESPONDER] = {8,8,8,8,8};

// Arrays of positions of the entities
position c_position[N_CIVILIAN]; // Civilians positions
position d_position[N_DRONE]; // Drones positions
position f_position[N_FIRST_RESPONDER]; // First responders positions

// Map initialization of the FIRE and EXITS
int map[N_ROW][N_COL] = {
    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {0, 4, 4, 4, 0, 0, 0, 0, 0, 0, 0, 4, 4, 4, 0},
    {0, 4, 4, 4, 0, 0, 0, 0, 0, 0, 0, 4, 4, 4, 0},
    {0, 4, 4, 4, 0, 0, 0, 0, 0, 0, 0, 4, 4, 4, 0},
    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {0, 0, 0, 0, 0, 0, 4, 4, 4, 0, 0, 0, 0, 0, 0},
    {0, 0, 0, 0, 0, 0, 4, 4, 4, 0, 0, 0, 0, 0, 0},
    {0, 0, 0, 0, 0, 0, 4, 4, 4, 0, 0, 0, 0, 0, 0},
    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1}
};

// Initialize the entities positions
void initializePositions() {
    // Drones
    position d0, d1, d2;
    // Civilians
    position c0, c1, c2, c3, c4, c5, c6, c7, c8, c9;
    // First responders
    position f0, f1, f2, f3, f4;

    // Initialize drone positions
    d0.r = 0; d0.c = 0;
    d1.r = 0; d1.c = 7;
    d2.r = 0; d2.c = 14;
    d_position[0] = d0;
    d_position[1] = d1;
    d_position[2] = d2;

    // Initialize civilian positions
    c0.r = 5; c0.c = 3;
    c1.r = 5; c1.c = 11;
    c2.r = 10; c2.c = 7;
    c3.r = 12; c3.c = 2;
    c4.r = 12; c4.c = 12;
    c5.r = 15; c5.c = 5;
    c6.r = 15; c6.c = 9;
    c7.r = 17; c7.c = 3;
    c8.r = 17; c8.c = 7;
    c9.r = 17; c9.c = 11;
    c_position[0] = c0;
    c_position[1] = c1;
    c_position[2] = c2;
    c_position[3] = c3;
    c_position[4] = c4;
    c_position[5] = c5;
    c_position[6] = c6;
    c_position[7] = c7;
    c_position[8] = c8;
    c_position[9] = c9;

    // Initialize first responders positions
    f0.r = 18; f0.c = 0;
    f1.r = 18; f1.c = 14;
    f2.r = 19; f2.c = 3;
    f3.r = 19; f3.c = 7;
    f4.r = 19; f4.c = 11;
    f_position[0] = f0;
    f_position[1] = f1;
    f_position[2] = f2;
    f_position[3] = f3;
    f_position[4] = f4;

}
// &lt;---- END SYSTEM 2 ----&gt;
*/

/*
// &lt;---- SYSTEM 3 ----&gt;
const int N_ROW = 18;
const int N_COL = 12;
const int N_DRONE = 3;
const int N_FIRST_RESPONDER = 5;
const int N_CIVILIAN = 10;

const int drone_ids[N_DRONE] = {0,1,2};
const int drone_nvs[N_DRONE] = {1,1,1};

const int civilian_ids[N_CIVILIAN] = {0,1,2,3,4,5,6,7,8,9};
const int civilian_tvs[N_CIVILIAN] = {15,18,20,22,25,17,19,21,23,24};
const int civilian_tzrs[N_CIVILIAN] = {6,6,6,6,6,6,6,6,6,6};

const int first_responder_ids[N_FIRST_RESPONDER] = {0,1,2,3,4};
const int first_responder_tfrs[N_FIRST_RESPONDER] = {8,8,8,8,8};

// Arrays of positions of the entities
position c_position[N_CIVILIAN]; // Civilians positions
position d_position[N_DRONE]; // Drones positions
position f_position[N_FIRST_RESPONDER]; // First responders positions

// Map initialization of the FIRE and EXITS
int map[N_ROW][N_COL] = {
    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {0, 4, 4, 4, 0, 0, 0, 0, 4, 4, 4, 0},
    {0, 4, 4, 4, 0, 0, 0, 0, 4, 4, 4, 0},
    {0, 4, 4, 4, 0, 0, 0, 0, 4, 4, 4, 0},
    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {0, 0, 0, 0, 0, 4, 4, 0, 0, 0, 0, 0},
    {0, 0, 0, 0, 0, 4, 4, 0, 0, 0, 0, 0},
    {0, 0, 0, 0, 0, 4, 4, 0, 0, 0, 0, 0},
    {0, 0, 0, 0, 0, 4, 4, 0, 0, 0, 0, 0},
    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1}
};

// Initialize the entities positions
void initializePositions() {
    // Drones
    position d0, d1, d2;
    // Civilians
    position c0, c1, c2, c3;
    // First responders
    position f0, f1;

    // Initialize drone positions
    d0.r = 0; d0.c = 0;
    d1.r = 0; d1.c = 5;
    d2.r = 0; d2.c = 11;
    d_position[0] = d0;
    d_position[1] = d1;
    d_position[2] = d2;

    // Initialize civilian positions
    c0.r = 5; c0.c = 3;
    c1.r = 5; c1.c = 8;
    c2.r = 12; c2.c = 2;
    c3.r = 12; c3.c = 9;
    c_position[0] = c0;
    c_position[1] = c1;
    c_position[2] = c2;
    c_position[3] = c3;

    // Initialize first responders positions
    f0.r = 17; f0.c = 1;
    f1.r = 17; f1.c = 10;
    f_position[0] = f0;
    f_position[1] = f1;
}
// &lt;---- END SYSTEM 3 ----&gt;
*/


// ---- MOVEMENT ----
// Directions
const int UP = 0;
const int RIGHT = 1;
const int DOWN = 2;
const int LEFT = 3;
const int STAY = 4; // Only for first responder

// Check if the position is within the map
bool isInsideMap(int row, int col) {
    return row &gt;= 0 &amp;&amp; row &lt; N_ROW &amp;&amp; col &gt;= 0 &amp;&amp; col &lt; N_COL;
}

bool isPositionFree(int row, int col){
    if(map[row][col] == FREE)
        return true;
    return false;
}

// Checks if the cell in the provided direction from the current_position is free and within bounds
bool canMove(int direction, position current_position) {
    int new_r;
    int new_c;

    if (direction == STAY)
        return true;

    new_r = current_position.r;
    new_c = current_position.c;

    // Calculate new position based on direction
    if (direction == UP) new_r--;
    else if (direction == RIGHT) new_c++;
    else if (direction == DOWN) new_r++;
    else if (direction == LEFT) new_c--;

    // Check if new position is within grid bounds and empty
    if (!isInsideMap(new_r, new_c) || map[new_r][new_c] != 0) 
        return false;
    
    // Check if the map is free in the new cell
    if(!isPositionFree(new_r, new_c))
        return false;

    return true;
}

// Returns a new position given an old_position and a direction
// No need to check if the new position is within bounds or free, since the canMove function is called before this function
position getNewPosition(int direction, position old_position) {
    position new_position;
    int new_r = old_position.r;
    int new_c = old_position.c;

    // Calculate new position based on direction
    if (direction == UP) new_r--;
    else if (direction == RIGHT) new_c++;
    else if (direction == DOWN) new_r++;
    else if (direction == LEFT) new_c--;

    new_position.r = new_r;
    new_position.c = new_c;

    return new_position;
}

// Updates the content of a cell in the map
void updateMap(int value, position cell){
    map[cell.r][cell.c] = value;
}

// Move the entity in the map
void move(int direction, int entity_id, int entity_type) {
    position current_position;
    position new_position;

    if (entity_type == FIRST_RESPONDER) {
        // First responder
        if (direction == STAY)
            return;

        current_position = f_position[entity_id];
        if (map[current_position.r][current_position.c] == ASSISTING_CONTACT)
            entity_type = ASSISTING_CONTACT;

        new_position = getNewPosition(direction, current_position);
        f_position[entity_id] = new_position;

    } else if (entity_type == CIVILIAN) {
        // Civilian
        current_position = c_position[entity_id];
        new_position = getNewPosition(direction, current_position);
        c_position[entity_id] = new_position;
    }
    
    updateMap(FREE, current_position);
    updateMap(entity_type, new_position);
}

// Calculates Manhattan distance between 2 cells
// Manhattan distance, since the entities can only move in 4 directions
int getDistance(position pos1, position pos2) {
    int dr = pos1.r - pos2.r;
    int dc = pos1.c - pos2.c;
    return (dr &gt; 0 ? dr : -dr) + (dc &gt; 0 ? dc : -dc);
}

// Gets distance between 2 civilians indipendent of their states
int getDistanceCC(int c1_id, int c2_id) {
    position position_c1 = c_position[c1_id];
    position position_c2 = c_position[c2_id];
    return getDistance(position_c1, position_c2);
}

// Gets distance between a civilian and a first responder indipendent of their states
int getDistanceCF(int c_id, int fr_id) {
    position position_c = c_position[c_id];
    position position_fr = f_position[fr_id];
    return getDistance(position_c, position_fr);
}

// Change state of entity on the map
void changeStateTo(int entity_id, int entity_type, int new_state) {
    position current_position;
    if (entity_type == CIVILIAN){
        current_position = c_position[entity_id];
    }else if(entity_type == FIRST_RESPONDER) {
        current_position = f_position[entity_id];
    }

    updateMap(new_state, current_position);

    // if the civialian is dead or safe we also remove it from the c_position array
    if(entity_type == CIVILIAN &amp;&amp; new_state == 0) {
        position temp = {-1, -1};
        c_position[entity_id] = temp;
    }
}

// Find civilian id from its position
int findCivilianIdFromPos(int row, int col) {
    int i;
    for (i = 0; i &lt; N_CIVILIAN; i++)
        if (c_position[i].r == row &amp;&amp; c_position[i].c == col)
            return i;
    return -1;
}

// Find first responder id from its position
int findFirstResponderIdFromPos(int row, int col) {
    int i;
    for (i = 0; i &lt; N_FIRST_RESPONDER; i++)
        if (f_position[i].r == row &amp;&amp; f_position[i].c == col)
            return i;
    return -1;
}


// ---- COMMUNICATION ----
// Channel declaration
broadcast chan initialization_completed;
chan drone_msg_start[N_CIVILIAN];
chan drone_msg_zero_responder[N_CIVILIAN];
chan drone_msg_contact_first_responder[N_CIVILIAN];
chan rescue_msg[N_CIVILIAN];
chan rescue_completed_msg[N_CIVILIAN];
chan casualty_msg[N_CIVILIAN];
urgent chan civilian_contact_msg[N_FIRST_RESPONDER];

// Single message communication drone -&gt; civilian zero responder
typedef struct {
    int target_id;
    // Implicit recipient_id
} msg_single;
typedef struct {
    msg_single message;
} inbox_single;
struct {
    inbox_single inboxes[N_CIVILIAN];
} global_drone_comm_zero_responder;

void sendMessageSingle(int target_id, int recipient_id) {
    msg_single new_message = {target_id};
    global_drone_comm_zero_responder.inboxes[recipient_id].message = new_message;
    // Cannot be conflicts since, only 1 drone at a time makes a decision
}
int readMessageSingle(int recipient_id) {
    msg_single recipient_message = global_drone_comm_zero_responder.inboxes[recipient_id].message;
    msg_single empty_message = {-1};
    global_drone_comm_zero_responder.inboxes[recipient_id].message = empty_message;
    return recipient_message.target_id;
}

// Double message communication drone -&gt; civilian contacting
// Double message communication civilian contacting -&gt; first responder
typedef struct {
    int victim_id;
    int target_id;
    // Implicit recipient_id
} msg_double;
typedef struct {
    msg_double message;
} inbox_double;
struct {
    inbox_double inboxes[N_CIVILIAN];
} global_drone_comm_civilian_contacting;
struct {
    inbox_double inboxes[N_FIRST_RESPONDER];
} global_civilian_contacting_comm_first_responder;

void sendMessageDouble(int victim_id, int target_id, int recipient_id, int recipient_type) {
    msg_double new_message = {victim_id, target_id};
    if (recipient_type == CIVILIAN)
        global_drone_comm_civilian_contacting.inboxes[recipient_id].message = new_message;
    else
        // First responder
        global_civilian_contacting_comm_first_responder.inboxes[recipient_id].message = new_message;
}
msg_double readMessageDouble(int recipient_id, int recipient_type) {
    msg_double empty_message = {-1, -1};

    if (recipient_type == CIVILIAN) {
        msg_double recipient_message = global_drone_comm_civilian_contacting.inboxes[recipient_id].message;
        global_drone_comm_civilian_contacting.inboxes[recipient_id].message = empty_message;
        return recipient_message;
    } else {
        // First responder
        msg_double recipient_message = global_civilian_contacting_comm_first_responder.inboxes[recipient_id].message;
        global_civilian_contacting_comm_first_responder.inboxes[recipient_id].message = empty_message;
        return recipient_message;
    }
}

// Initializes the global communication inboxes
void initializeGlobalCommunication()  {
    msg_single empty_message_single = {-1};
    msg_double empty_message_double = {-1,-1};
    for (i : int[0,N_CIVILIAN - 1])
        global_drone_comm_zero_responder.inboxes[i].message = empty_message_single;
    for (i : int[0,N_CIVILIAN - 1])
        global_drone_comm_civilian_contacting.inboxes[i].message = empty_message_double;    
    for (i : int[0,N_FIRST_RESPONDER - 1])
        global_civilian_contacting_comm_first_responder.inboxes[i].message = empty_message_double;
}


// ---- FOR QUERIES ----
clock global_time;

// Property 1 and 2
int n_safe; // Number of safe civilians
int n_casualty = 0; // Number of casualties

int t_scs = 10;
int percentage = 200; // N% written as a whole (e.g. 10 = 10%)
int n_percentage; // N_CIVILIAN * N% with some workarounds so that we don't use doubles

void initializeQueries(){
     n_percentage = (N_CIVILIAN * percentage * 10 + 500) / 1000; 
}

// Checks if the positions of the civilians are different
bool areDifferent(){
    int i,j;
    // Check civilian positions
    for (i = 0; i &lt; N_CIVILIAN - 1; i++) {
        if (c_position[i].r != -1 || c_position[i].c != -1) {
            for (j = i + 1; j &lt; N_CIVILIAN; j++) {
                if ((c_position[j].r != -1 || c_position[j].c != -1) &amp;&amp;
                    c_position[i].r == c_position[j].r &amp;&amp; 
                    c_position[i].c == c_position[j].c) {
                    return false;
                }
            }
        }
    }

    // Check first responder positions
    for (i = 0; i &lt; N_FIRST_RESPONDER - 1; i++) {
        for (j = i + 1; j &lt; N_FIRST_RESPONDER; j++) {
            if (f_position[i].r == f_position[j].r &amp;&amp; 
                f_position[i].c == f_position[j].c) {
                return false;
            }
        }
    }

    // Check if any non-(-1, -1) civilian position matches any first responder position
    for (i = 0; i &lt; N_CIVILIAN; i++) {
        if (c_position[i].r != -1 || c_position[i].c != -1) {
            for (j = 0; j &lt; N_FIRST_RESPONDER; j++) {
                if (c_position[i].r == f_position[j].r &amp;&amp; 
                    c_position[i].c == f_position[j].c) {
                    return false;
                }
            }
        }
    }

    return true;
}</declaration>
	<template>
		<name>Initializer</name>
		<declaration>void initialization() {
    initializePositions();
    initializeGlobalCommunication();
    initializeQueries();
}</declaration>
		<location id="id0" x="-561" y="-68">
			<name x="-603" y="-102">Start</name>
			<committed/>
		</location>
		<location id="id1" x="-272" y="-68">
			<name x="-282" y="-102">Initialized</name>
		</location>
		<init ref="id0"/>
		<transition id="id2">
			<source ref="id0"/>
			<target ref="id1"/>
			<label kind="synchronisation" x="-527" y="-102">initialization_completed!</label>
			<label kind="assignment" x="-527" y="-119">initialization()</label>
		</transition>
	</template>
	<template>
		<name x="5" y="5">Drone</name>
		<parameter>const int drone_id, const int nv</parameter>
		<declaration>// ---- Private drone's variables ----
int detected_survivor_id = -1;
int detected_victim_id = -1;
int detected_first_responder_id = -1;
int direction = 1; // current movement direction of the drone (1 = DOWN, -1 = UP)

// ---- Private drone's funtions ----
// Drone moving policy
void move() { 
    position current_position = d_position[drone_id];
    
    // If drone at the top or bottom of the grid change direction, taking into account drone's nv
    if (current_position.r == N_ROW - 1 - nv)
        direction = -1;  
    else if (current_position.r == nv)
        direction = 1;

    d_position[drone_id].r = d_position[drone_id].r + direction;
}

// Check if there are a survivor, a victim, a first responder within nv-cell range
// If there is more than one civilian / victim / first responder, detect only the closest one
void scanArea() {
    position current_position = d_position[drone_id];

    int detected_survivor_distance = 2*nv + 1;
    int detected_victim_distance = 2*nv + 1;
    int detected_first_responder_distance = 2*nv + 1;
    
    int row, col;

    // Check square radius nv cells
    for (row = current_position.r - nv; row &lt;= current_position.r + nv; row++) {
        for (col = current_position.c - nv; col &lt;= current_position.c + nv; col++) {
            if (isInsideMap(row, col)) {
                position cell_position;
                int distance;
                cell_position.r = row;
                cell_position.c = col;
                distance = getDistance(current_position, cell_position);

                if (map[row][col] == CIVILIAN) {
                    int temp_civlian_id = findCivilianIdFromPos(row, col);
                    if (temp_civlian_id != -1)
                        if (distance &lt; detected_survivor_distance) {
                            detected_survivor_id = temp_civlian_id;
                            detected_survivor_distance = distance;
                        }
                }
                else if (map[row][col] == VICTIM) {
                    int temp_victim_id = findCivilianIdFromPos(row, col);
                    if (temp_victim_id != -1)
                        // Drone cannot assess victim's tv like a first responder
                        if (distance &lt; detected_victim_distance) {
                            detected_victim_id = temp_victim_id;
                            detected_victim_distance = distance;
                        }
                }
                else if (map[row][col] == FIRST_RESPONDER) {
                    int temp_first_responder_id = findFirstResponderIdFromPos(row, col);
                    if (temp_first_responder_id != -1)
                        if (distance &lt; detected_first_responder_distance) {
                            detected_first_responder_id = temp_first_responder_id;
                            detected_first_responder_distance = distance;
                        }
                }
            }
        }
    }
}

bool foundCivilianAndVictim() {
    if (detected_survivor_id != -1 &amp;&amp; detected_victim_id != -1)
        return true;
    return false;
}

bool foundFirstResponder() {
    return detected_first_responder_id != -1;
}

void prepareNewContact() {
    detected_survivor_id = -1;
    detected_victim_id = -1;
    detected_first_responder_id = -1;
}</declaration>
		<location id="id3" x="-2167" y="-1521">
		</location>
		<location id="id4" x="-1895" y="-1521">
			<name x="-1946" y="-1513">Idle</name>
		</location>
		<location id="id5" x="-1156" y="-1521">
			<committed/>
		</location>
		<location id="id6" x="-1156" y="-1717">
			<name x="-1139" y="-1743">Communicating</name>
			<committed/>
		</location>
		<location id="id7" x="-1156" y="-1360">
			<name x="-1139" y="-1385">Patrolling</name>
			<committed/>
		</location>
		<location id="id8" x="-1895" y="-1674">
			<committed/>
		</location>
		<init ref="id3"/>
		<transition id="id9">
			<source ref="id8"/>
			<target ref="id4"/>
			<label kind="assignment" x="-2065" y="-1632">prepareNewContact()</label>
		</transition>
		<transition id="id10">
			<source ref="id6"/>
			<target ref="id8"/>
			<label kind="guard" x="-1640" y="-1861">!foundFirstResponder()</label>
			<label kind="synchronisation" x="-1742" y="-1844">drone_msg_zero_responder[detected_survivor_id]!</label>
			<label kind="assignment" x="-1793" y="-1827">sendMessageSingle(detected_victim_id,detected_survivor_id)</label>
			<nail x="-1156" y="-1870"/>
			<nail x="-1895" y="-1870"/>
		</transition>
		<transition id="id11">
			<source ref="id6"/>
			<target ref="id8"/>
			<label kind="guard" x="-1640" y="-1708">foundFirstResponder()</label>
			<label kind="synchronisation" x="-1793" y="-1691">drone_msg_contact_first_responder[detected_survivor_id]!</label>
			<label kind="assignment" x="-1844" y="-1666">sendMessageDouble(detected_victim_id,detected_first_responder_id,
detected_survivor_id,CIVILIAN),
changeStateTo(detected_first_responder_id,FIRST_RESPONDER,ASSISTING_CONTACT)</label>
			<nail x="-1895" y="-1717"/>
		</transition>
		<transition id="id12">
			<source ref="id7"/>
			<target ref="id4"/>
			<label kind="assignment" x="-1640" y="-1385">move(),prepareNewContact()</label>
			<nail x="-1895" y="-1360"/>
		</transition>
		<transition id="id13">
			<source ref="id5"/>
			<target ref="id7"/>
			<label kind="guard" x="-1139" y="-1453">!foundCivilianAndVictim()</label>
		</transition>
		<transition id="id14">
			<source ref="id5"/>
			<target ref="id6"/>
			<label kind="guard" x="-1139" y="-1640">foundCivilianAndVictim()</label>
			<label kind="synchronisation" x="-1139" y="-1623">drone_msg_start[detected_survivor_id]!</label>
		</transition>
		<transition id="id15">
			<source ref="id4"/>
			<target ref="id5"/>
			<label kind="assignment" x="-1572" y="-1547">scanArea()</label>
		</transition>
		<transition id="id16">
			<source ref="id3"/>
			<target ref="id4"/>
			<label kind="synchronisation" x="-2133" y="-1547">initialization_completed?</label>
		</transition>
	</template>
	<template>
		<name>FirstResponder</name>
		<parameter>const int first_responder_id, const int tfr</parameter>
		<declaration>// ---- Private First-Responder's variables ----
clock x;
int detected_victim_id = -1;
int contacting_survivor_id = -1;

// ---- Private First-Responder's functions ----
// Checks if there is a victim within a 1-cell range to save
// If there is more than one victim save the one with largest tv
void detectVictim() {
    position current_position = f_position[first_responder_id];
    int detected_victim_tv = -1;
    int row, col;
    
    // Check square radius 1 cell
    for (row = current_position.r - 1; row &lt;= current_position.r + 1; row++)
        for (col = current_position.c - 1; col &lt;= current_position.c + 1; col++)
            if (isInsideMap(row, col) &amp;&amp; map[row][col] == VICTIM) {
                int temp_victim_id = findCivilianIdFromPos(row, col);
                int temp_victim_tv = -1;

                if (temp_victim_id != -1) {
                    temp_victim_tv = civilian_tvs[temp_victim_id];
                    // Select the victim with greatest tv
                    if (temp_victim_tv &gt; detected_victim_tv) {
                        detected_victim_id = temp_victim_id;
                        detected_victim_tv = temp_victim_tv;
                    }
                }
            }    
}

bool needToAssistContact() {
    position current_position = f_position[first_responder_id];
    return map[current_position.r][current_position.c] == ASSISTING_CONTACT;
}

bool foundVictim() {
    if (detected_victim_id != -1)
        return true;
    return false;
}

void prepareNewRescue() {
    detected_victim_id = -1;
    contacting_survivor_id = -1;
}

void readMessageFromContactingCivilian() {
    msg_double message;
    message = readMessageDouble(first_responder_id, FIRST_RESPONDER);
    detected_victim_id = message.victim_id;
    contacting_survivor_id = message.target_id;
}</declaration>
		<location id="id17" x="-1487" y="-1793">
		</location>
		<location id="id18" x="-1020" y="-1606">
			<committed/>
		</location>
		<location id="id19" x="-1300" y="-1606">
			<name x="-1351" y="-1598">Idle</name>
		</location>
		<location id="id20" x="-323" y="-1606">
			<name x="-306" y="-1631">Assisting</name>
			<label kind="invariant" x="-359" y="-1589">x &lt;= tfr</label>
		</location>
		<location id="id21" x="-1998" y="-1606">
			<committed/>
		</location>
		<location id="id22" x="-1998" y="-1444">
			<name x="-2159" y="-1462">AssistingContact</name>
			<label kind="invariant" x="-1981" y="-1436">x &lt;= tfr
+ getDistanceCF(detected_victim_id,first_responder_id)</label>
		</location>
		<location id="id23" x="-1998" y="-960">
			<label kind="invariant" x="-1989" y="-943">x &lt;= tfr
+ getDistanceCF(detected_victim_id, first_responder_id)</label>
			<label kind="comments" x="-1981" y="-1011">If the victim dies
=&gt; Finish rescue of the contacting_survivor</label>
		</location>
		<location id="id24" x="-1734" y="-1249">
			<committed/>
		</location>
		<location id="id25" x="-1020" y="-1462">
			<name x="-1003" y="-1487">Wandering</name>
		</location>
		<location id="id26" x="-1300" y="-1249">
			<committed/>
		</location>
		<init ref="id17"/>
		<transition id="id27">
			<source ref="id26"/>
			<target ref="id19"/>
			<label kind="assignment" x="-1283" y="-1334">changeStateTo(first_responder_id,FIRST_RESPONDER,FIRST_RESPONDER),
prepareNewRescue()</label>
		</transition>
		<transition id="id28">
			<source ref="id21"/>
			<target ref="id22"/>
			<label kind="synchronisation" x="-1980" y="-1538">rescue_msg[detected_victim_id]!</label>
			<label kind="assignment" x="-1980" y="-1521">x = 0</label>
		</transition>
		<transition id="id29">
			<source ref="id18"/>
			<target ref="id25"/>
			<label kind="guard" x="-1011" y="-1547">!foundVictim()</label>
		</transition>
		<transition id="id30">
			<source ref="id22"/>
			<target ref="id24"/>
			<label kind="guard" x="-1980" y="-1334">x &gt;= tfr
+ getDistanceCF(detected_victim_id,first_responder_id)</label>
			<label kind="synchronisation" x="-1981" y="-1292">rescue_completed_msg[detected_victim_id]!</label>
			<nail x="-1998" y="-1249"/>
		</transition>
		<transition id="id31">
			<source ref="id24"/>
			<target ref="id26"/>
			<label kind="synchronisation" x="-1708" y="-1241">rescue_completed_msg[contacting_survivor_id]!</label>
		</transition>
		<transition id="id32">
			<source ref="id25"/>
			<target ref="id19"/>
			<label kind="select" x="-1283" y="-1453">direction : int[0,4]</label>
			<label kind="guard" x="-1283" y="-1436">canMove(direction,f_position[first_responder_id])</label>
			<label kind="assignment" x="-1283" y="-1419">move(direction,first_responder_id,FIRST_RESPONDER)</label>
			<nail x="-1300" y="-1462"/>
		</transition>
		<transition id="id33">
			<source ref="id23"/>
			<target ref="id26"/>
			<label kind="guard" x="-1283" y="-1113">x &gt;= tfr
+ getDistanceCF(detected_victim_id,first_responder_id)</label>
			<label kind="synchronisation" x="-1283" y="-1070">rescue_completed_msg[contacting_survivor_id]!</label>
			<nail x="-1300" y="-960"/>
		</transition>
		<transition id="id34">
			<source ref="id22"/>
			<target ref="id23"/>
			<label kind="guard" x="-1989" y="-1113">x &lt; tfr
+ getDistanceCF(detected_victim_id,first_responder_id)</label>
			<label kind="synchronisation" x="-1989" y="-1070">casualty_msg[detected_victim_id]?</label>
		</transition>
		<transition id="id35">
			<source ref="id19"/>
			<target ref="id21"/>
			<label kind="synchronisation" x="-1836" y="-1598">civilian_contact_msg[first_responder_id]?</label>
			<label kind="assignment" x="-1810" y="-1581">readMessageFromContactingCivilian()</label>
		</transition>
		<transition id="id36">
			<source ref="id18"/>
			<target ref="id20"/>
			<label kind="guard" x="-892" y="-1666">foundVictim()</label>
			<label kind="synchronisation" x="-892" y="-1649">rescue_msg[detected_victim_id]!</label>
			<label kind="assignment" x="-892" y="-1632">x = 0</label>
		</transition>
		<transition id="id37">
			<source ref="id20"/>
			<target ref="id19"/>
			<label kind="synchronisation" x="-629" y="-1802">casualty_msg[detected_victim_id]?</label>
			<label kind="assignment" x="-493" y="-1785">prepareNewRescue()</label>
			<nail x="-325" y="-1818"/>
			<nail x="-1300" y="-1818"/>
		</transition>
		<transition id="id38">
			<source ref="id20"/>
			<target ref="id19"/>
			<label kind="guard" x="-410" y="-1716">x &gt;= tfr</label>
			<label kind="synchronisation" x="-697" y="-1700">rescue_completed_msg[detected_victim_id]!</label>
			<label kind="assignment" x="-493" y="-1682">prepareNewRescue()</label>
			<nail x="-325" y="-1725"/>
			<nail x="-1300" y="-1725"/>
		</transition>
		<transition id="id39">
			<source ref="id19"/>
			<target ref="id18"/>
			<label kind="guard" x="-1249" y="-1649">!needToAssistContact()</label>
			<label kind="assignment" x="-1215" y="-1632">detectVictim()</label>
		</transition>
		<transition id="id40">
			<source ref="id17"/>
			<target ref="id19"/>
			<label kind="synchronisation" x="-1623" y="-1708">initialization_completed?</label>
			<label kind="assignment" x="-1904" y="-1691">updateMap(FIRST_RESPONDER,f_position[first_responder_id])</label>
		</transition>
	</template>
	<template>
		<name>Civilian</name>
		<parameter>const int civilian_id, const int tv, const int tzr</parameter>
		<declaration>// ---- Private Civilian's variables ----
clock x;
int comm_victim_id = -1;
int comm_first_responder_id = -1;

// ---- Private Civilian's variables ----
// Checks if there is an entity of "type" in the "radius"
bool checkNeighbor(int type){
    position current_position = c_position[civilian_id];
    int row, col;
    
    // Check all adjacent cells (including diagonals)
    for (row = current_position.r - 1; row &lt;= current_position.r + 1; row++)
        for (col = current_position.c - 1; col &lt;= current_position.c + 1; col++)
            if (isInsideMap(row, col) &amp;&amp; map[row][col] == type)
                return true;

    return false;
}

// Check if the civilian is near an exit
bool amSafe() {
    return checkNeighbor(EXIT);
}

// Check if the civilian is near a fire
bool amVictim() {
    return checkNeighbor(FIRE);
}

void changeStateCivilian(int new_state) {

    if (new_state == SAFE) {
        n_safe++;
        new_state = 0;
    } else if (new_state == CASUALTY) {
        n_casualty++;
        new_state = 0;
    }

    changeStateTo(civilian_id, CIVILIAN, new_state);
}

void readDoubleMessageFromDrone() {
    msg_double message;
    message = readMessageDouble(civilian_id, CIVILIAN);
    comm_victim_id = message.victim_id;
    comm_first_responder_id = message.target_id;
}

bool isCommVictimStillVictim() {
    position target_position = c_position[comm_victim_id];
    if(target_position.c == -1 &amp;&amp; target_position.r == -1) return false;
    return map[target_position.r][target_position.c] == VICTIM;
}

void prepareNewCommunication() {
    changeStateTo(comm_first_responder_id,FIRST_RESPONDER,FIRST_RESPONDER);
    comm_victim_id = -1;
    comm_first_responder_id = -1;
}</declaration>
		<location id="id41" x="-2839" y="-935">
		</location>
		<location id="id42" x="-2431" y="-935">
			<committed/>
		</location>
		<location id="id43" x="-2431" y="-1096">
			<name x="-2482" y="-1122">Safe</name>
		</location>
		<location id="id44" x="-1716" y="-935">
			<committed/>
		</location>
		<location id="id45" x="-1716" y="-1096">
			<name x="-1700" y="-1122">Victim</name>
			<label kind="invariant" x="-1700" y="-1088">x &lt;= tv</label>
		</location>
		<location id="id46" x="-773" y="-935">
			<committed/>
		</location>
		<location id="id47" x="-1717" y="-1266">
			<name x="-1751" y="-1300">Casualty</name>
		</location>
		<location id="id48" x="-2074" y="-1096">
			<name x="-2125" y="-1079">InAssistance</name>
			<label kind="invariant" x="-2099" y="-1062">x &lt;= tv</label>
		</location>
		<location id="id49" x="-1173" y="-1147">
			<committed/>
		</location>
		<location id="id50" x="-1173" y="-1309">
			<name x="-1301" y="-1334">ZeroResponder</name>
			<label kind="invariant" x="-1156" y="-1300">x &lt;= tzr + getDistanceCC(civilian_id,comm_victim_id)</label>
		</location>
		<location id="id51" x="-1173" y="-1479">
			<label kind="invariant" x="-1156" y="-1479">x &lt;= tzr + getDistanceCC(civilian_id,comm_victim_id)</label>
			<label kind="comments" x="-1522" y="-1470">If the victim dies, the zero-responder
finishes helping themselves.</label>
		</location>
		<location id="id52" x="-382" y="-1521">
			<name x="-365" y="-1555">Contacting</name>
		</location>
		<location id="id53" x="-383" y="-1147">
			<name x="-484" y="-1173">GoingToFr</name>
			<label kind="invariant" x="-867" y="-1147">x &lt;= getDistanceCF(civilian_id,comm_first_responder_id)</label>
		</location>
		<location id="id54" x="-1496" y="-935">
			<name x="-1513" y="-969">Idle</name>
		</location>
		<location id="id55" x="-382" y="-1334">
			<name x="-501" y="-1360">WaitingForFr</name>
		</location>
		<init ref="id41"/>
		<transition id="id56">
			<source ref="id55"/>
			<target ref="id54"/>
			<label kind="guard" x="-357" y="-1360">!isCommVictimStillVictim()</label>
			<label kind="assignment" x="-127" y="-1360">prepareNewCommunication()</label>
			<nail x="136" y="-1334"/>
			<nail x="136" y="-799"/>
			<nail x="-1385" y="-799"/>
		</transition>
		<transition id="id57">
			<source ref="id53"/>
			<target ref="id55"/>
			<label kind="guard" x="-357" y="-1266">isCommVictimStillVictim() &amp;&amp;
x &gt;= getDistanceCF(civilian_id,comm_first_responder_id)</label>
		</transition>
		<transition id="id58">
			<source ref="id54"/>
			<target ref="id46"/>
			<label kind="synchronisation" x="-1402" y="-960">drone_msg_start[civilian_id]?</label>
		</transition>
		<transition id="id59">
			<source ref="id53"/>
			<target ref="id54"/>
			<label kind="guard" x="-357" y="-1139">!isCommVictimStillVictim()</label>
			<label kind="assignment" x="-357" y="-1122">prepareNewCommunication()</label>
			<nail x="-102" y="-1147"/>
			<nail x="-102" y="-799"/>
			<nail x="-1385" y="-799"/>
		</transition>
		<transition id="id60">
			<source ref="id54"/>
			<target ref="id42"/>
			<label kind="select" x="-1691" y="-867">direction : int[0,3]</label>
			<label kind="guard" x="-1878" y="-850">canMove(direction,c_position[civilian_id])</label>
			<label kind="assignment" x="-1827" y="-833">move(direction,civilian_id,CIVILIAN)</label>
			<nail x="-1496" y="-799"/>
			<nail x="-2431" y="-799"/>
		</transition>
		<transition id="id61">
			<source ref="id52"/>
			<target ref="id43"/>
			<label kind="synchronisation" x="-918" y="-1555">rescue_completed_msg[civilian_id]?</label>
			<label kind="assignment" x="-629" y="-1555">changeStateCivilian(SAFE)</label>
			<nail x="-2431" y="-1521"/>
		</transition>
		<transition id="id62">
			<source ref="id55"/>
			<target ref="id52"/>
			<label kind="guard" x="-357" y="-1470">isCommVictimStillVictim()</label>
			<label kind="synchronisation" x="-357" y="-1453">civilian_contact_msg[comm_first_responder_id]!</label>
			<label kind="assignment" x="-357" y="-1436">sendMessageDouble(comm_victim_id,civilian_id,
comm_first_responder_id,FIRST_RESPONDER)</label>
		</transition>
		<transition id="id63">
			<source ref="id49"/>
			<target ref="id50"/>
			<label kind="synchronisation" x="-1156" y="-1249">rescue_msg[comm_victim_id]!</label>
			<label kind="assignment" x="-1156" y="-1232">x = 0</label>
		</transition>
		<transition id="id64">
			<source ref="id46"/>
			<target ref="id53"/>
			<label kind="synchronisation" x="-739" y="-1062">drone_msg_contact_first_responder[civilian_id]?</label>
			<label kind="assignment" x="-739" y="-1037">changeStateCivilian(IN_CONTACT),
readDoubleMessageFromDrone(),
x = 0</label>
			<nail x="-756" y="-1071"/>
			<nail x="-382" y="-1071"/>
		</transition>
		<transition id="id65">
			<source ref="id51"/>
			<target ref="id43"/>
			<label kind="guard" x="-2414" y="-1470">x &gt;= tzr + getDistanceCC(civilian_id,comm_victim_id)</label>
			<label kind="assignment" x="-2414" y="-1453">changeStateCivilian(SAFE)</label>
			<nail x="-2431" y="-1479"/>
		</transition>
		<transition id="id66">
			<source ref="id50"/>
			<target ref="id51"/>
			<label kind="guard" x="-1165" y="-1436">x &lt; tzr + getDistanceCC(civilian_id,comm_victim_id)</label>
			<label kind="synchronisation" x="-1165" y="-1419">casualty_msg[comm_victim_id]?</label>
		</transition>
		<transition id="id67">
			<source ref="id50"/>
			<target ref="id43"/>
			<label kind="guard" x="-2414" y="-1368">x &gt;= tzr + getDistanceCC(civilian_id,comm_victim_id)</label>
			<label kind="synchronisation" x="-2415" y="-1351">rescue_completed_msg[comm_victim_id]!</label>
			<label kind="assignment" x="-2414" y="-1334">changeStateCivilian(SAFE)</label>
			<nail x="-1173" y="-1377"/>
			<nail x="-2431" y="-1377"/>
		</transition>
		<transition id="id68">
			<source ref="id46"/>
			<target ref="id49"/>
			<label kind="synchronisation" x="-1215" y="-1062">drone_msg_zero_responder[civilian_id]?</label>
			<label kind="assignment" x="-1215" y="-1037">changeStateCivilian(ZERO_RESPONDER),
comm_victim_id = readMessageSingle(civilian_id)</label>
			<nail x="-790" y="-1071"/>
			<nail x="-1173" y="-1071"/>
		</transition>
		<transition id="id69">
			<source ref="id48"/>
			<target ref="id43"/>
			<label kind="synchronisation" x="-2397" y="-1139">rescue_completed_msg[civilian_id]?</label>
			<label kind="assignment" x="-2397" y="-1122">changeStateCivilian(SAFE)</label>
		</transition>
		<transition id="id70">
			<source ref="id48"/>
			<target ref="id47"/>
			<label kind="guard" x="-2065" y="-1258">x &gt;= tv</label>
			<label kind="synchronisation" x="-2065" y="-1241">casualty_msg[civilian_id]!</label>
			<label kind="assignment" x="-2065" y="-1224">changeStateCivilian(CASUALTY)</label>
			<nail x="-2074" y="-1266"/>
		</transition>
		<transition id="id71">
			<source ref="id45"/>
			<target ref="id48"/>
			<label kind="synchronisation" x="-2048" y="-1139">rescue_msg[civilian_id]?</label>
			<label kind="assignment" x="-2048" y="-1122">changeStateCivilian(IN_ASSISTANCE)</label>
		</transition>
		<transition id="id72">
			<source ref="id45"/>
			<target ref="id47"/>
			<label kind="guard" x="-1700" y="-1215">x &gt;= tv</label>
			<label kind="assignment" x="-1700" y="-1198">changeStateCivilian(CASUALTY)</label>
		</transition>
		<transition id="id73">
			<source ref="id44"/>
			<target ref="id54"/>
			<label kind="guard" x="-1683" y="-960">!amVictim()</label>
		</transition>
		<transition id="id74">
			<source ref="id44"/>
			<target ref="id45"/>
			<label kind="guard" x="-1708" y="-1037">amVictim()</label>
			<label kind="assignment" x="-1708" y="-1020">changeStateCivilian(VICTIM), x = 0</label>
		</transition>
		<transition id="id75">
			<source ref="id42"/>
			<target ref="id44"/>
			<label kind="guard" x="-2397" y="-960">!amSafe()</label>
		</transition>
		<transition id="id76">
			<source ref="id42"/>
			<target ref="id43"/>
			<label kind="guard" x="-2422" y="-1037">amSafe()</label>
			<label kind="assignment" x="-2422" y="-1020">changeStateCivilian(SAFE)</label>
		</transition>
		<transition id="id77">
			<source ref="id41"/>
			<target ref="id42"/>
			<label kind="synchronisation" x="-2822" y="-986">initialization_completed?</label>
			<label kind="assignment" x="-2822" y="-969">updateMap(CIVILIAN,c_position[civilian_id])</label>
		</transition>
	</template>
	<system>// Templates instantiations
initializer = Initializer();


// &lt;---- SYSTEM 1 ----&gt;
drone0 = Drone(drone_ids[0], drone_nvs[0]);
drone1 = Drone(drone_ids[1], drone_nvs[1]);

fr0 = FirstResponder(first_responder_ids[0], first_responder_tfrs[0]);
fr1 = FirstResponder(first_responder_ids[1], first_responder_tfrs[1]);

civ0 = Civilian(civilian_ids[0], civilian_tvs[0], civilian_tzrs[0]);
civ1 = Civilian(civilian_ids[1], civilian_tvs[1], civilian_tzrs[1]);
civ2 = Civilian(civilian_ids[2], civilian_tvs[2], civilian_tzrs[2]);

// List of processes to be composed into a system
system initializer, drone0, drone1, fr0, fr1, civ0, civ1, civ2;
// &lt;---- END SYSTEM 1 ----&gt;



/*
// &lt;---- SYSTEM 2 ----&gt;
drone0 = Drone(drone_ids[0], drone_nvs[0]);
drone1 = Drone(drone_ids[1], drone_nvs[1]);
drone2 = Drone(drone_ids[2], drone_nvs[2]);

fr0 = FirstResponder(first_responder_ids[0], first_responder_tfrs[0]);
fr1 = FirstResponder(first_responder_ids[1], first_responder_tfrs[1]);
fr2 = FirstResponder(first_responder_ids[2], first_responder_tfrs[2]);
fr3 = FirstResponder(first_responder_ids[3], first_responder_tfrs[3]);
fr4 = FirstResponder(first_responder_ids[4], first_responder_tfrs[4]);

civ0 = Civilian(civilian_ids[0], civilian_tvs[0], civilian_tzrs[0]);
civ1 = Civilian(civilian_ids[1], civilian_tvs[1], civilian_tzrs[1]);
civ2 = Civilian(civilian_ids[2], civilian_tvs[2], civilian_tzrs[2]);
civ3 = Civilian(civilian_ids[3], civilian_tvs[3], civilian_tzrs[3]);
civ4 = Civilian(civilian_ids[4], civilian_tvs[4], civilian_tzrs[4]);
civ5 = Civilian(civilian_ids[5], civilian_tvs[5], civilian_tzrs[5]);
civ6 = Civilian(civilian_ids[6], civilian_tvs[6], civilian_tzrs[6]);
civ7 = Civilian(civilian_ids[7], civilian_tvs[7], civilian_tzrs[7]);
civ8 = Civilian(civilian_ids[8], civilian_tvs[8], civilian_tzrs[8]);
civ9 = Civilian(civilian_ids[9], civilian_tvs[9], civilian_tzrs[9]);

system initializer, drone0, drone1, drone2, fr0, fr1, fr2, fr3, fr4, civ0, civ1, civ2, civ3, civ4, civ5, civ6, civ7, civ8, civ9;
// &lt;---- END SYSTEM 2 ----&gt;
*/

/*
// &lt;---- SYSTEM 3 ----&gt;
drone0 = Drone(drone_ids[0], drone_nvs[0]);
drone1 = Drone(drone_ids[1], drone_nvs[1]);

fr0 = FirstResponder(first_responder_ids[0], first_responder_tfrs[0]);
fr1 = FirstResponder(first_responder_ids[1], first_responder_tfrs[1]);

civ0 = Civilian(civilian_ids[0], civilian_tvs[0], civilian_tzrs[0]);
civ1 = Civilian(civilian_ids[1], civilian_tvs[1], civilian_tzrs[1]);
civ2 = Civilian(civilian_ids[2], civilian_tvs[2], civilian_tzrs[2]);
civ3 = Civilian(civilian_ids[3], civilian_tvs[3], civilian_tzrs[3]);

system initializer, drone0, drone1, fr0, fr1, civ0, civ1, civ2, civ3;
// &lt;---- END SYSTEM 3 ----&gt;
*/</system>
	<queries>
		<option key="--diagnostic" value="1"/>
		<query>
			<formula>E&lt;&gt; n_safe &gt;= n_percentage &amp;&amp; global_time &lt; t_scs &amp;&amp; initializer.Initialized </formula>
			<comment>Checks that it is possible for a percentage N% of all civilians to reach a safe state within time Tscs.

i.e. checks for a upper bound.</comment>
		</query>
		<query>
			<formula>A&lt;&gt; n_safe &gt;= n_percentage &amp;&amp; global_time &lt; t_scs &amp;&amp; initializer.Initialized</formula>
			<comment>Checks that a percentage N% of all civilians is always guaranteed to reach a safe state within time Tscs.

i.e. checks for a lower bound.</comment>
			<result outcome="failure" type="quality" timestamp="2024-07-18 22:26:04 +0200">
				<option key="--diagnostic" value="1"/>
			</result>
		</query>
		<query>
			<formula>A[] (initializer.Start &amp;&amp; !areDifferent()) || (initializer.Initialized &amp;&amp; areDifferent())</formula>
			<comment>Checks that the positions of the civilians and first responders are always unique.</comment>
		</query>
	</queries>
</nta>
